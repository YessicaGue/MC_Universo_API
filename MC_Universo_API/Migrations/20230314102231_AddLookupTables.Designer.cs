// <auto-generated />
using System;
using MC_Universo_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MC_Universo_API.Migrations
{
    [DbContext(typeof(UniversoContext))]
    [Migration("20230314102231_AddLookupTables")]
    partial class AddLookupTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MC_Universo_API.Models.BajasSistema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaBaja")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_baja");

                    b.Property<int>("MotivoBajaId")
                        .HasColumnType("integer")
                        .HasColumnName("motivo_baja_id");

                    b.Property<int>("PersonaId")
                        .HasColumnType("integer")
                        .HasColumnName("persona_id")
                        .HasComment("Id de la persona que se dio de baja");

                    b.HasKey("Id")
                        .HasName("pk_bajas_sistema");

                    b.HasIndex("MotivoBajaId")
                        .HasDatabaseName("ix_bajas_sistema_motivo_baja_id");

                    b.HasIndex("PersonaId")
                        .HasDatabaseName("ix_bajas_sistema_persona_id");

                    b.HasIndex("Id", "PersonaId")
                        .IsUnique()
                        .HasDatabaseName("ix_bajas_sistema_id_persona_id");

                    b.ToTable("bajas_sistema", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.Causa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_causa");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_causa_id");

                    b.ToTable("causa", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.CausaGrupoCausa", b =>
                {
                    b.Property<int>("CausaId")
                        .HasColumnType("integer")
                        .HasColumnName("causa_id");

                    b.Property<int>("GrupoCausaId")
                        .HasColumnType("integer")
                        .HasColumnName("grupo_causa_id");

                    b.HasKey("CausaId", "GrupoCausaId")
                        .HasName("pk_causa_grupo_causa");

                    b.ToTable("causa_grupo_causa", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.CodigoInvitacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<Guid>("Codigo")
                        .HasColumnType("uuid")
                        .HasColumnName("codigo");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<int>("PersonaId")
                        .HasColumnType("integer")
                        .HasColumnName("sponsor_id");

                    b.HasKey("Id")
                        .HasName("pk_codigo_invitacion");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_codigo_invitacion_id");

                    b.HasIndex("PersonaId")
                        .HasDatabaseName("ix_codigo_invitacion_sponsor_id");

                    b.ToTable("codigo_invitacion", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.DatoContacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<int>("PersonaId")
                        .HasColumnType("integer")
                        .HasColumnName("persona_id");

                    b.Property<int>("TipoContactoId")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_contacto_id");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("valor");

                    b.Property<bool>("Verificado")
                        .HasColumnType("boolean")
                        .HasColumnName("verificado");

                    b.HasKey("Id")
                        .HasName("pk_dato_contacto");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_dato_contacto_id");

                    b.HasIndex("PersonaId")
                        .HasDatabaseName("ix_dato_contacto_persona_id");

                    b.HasIndex("TipoContactoId")
                        .HasDatabaseName("ix_dato_contacto_tipo_contacto_id");

                    b.ToTable("dato_contacto", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            PersonaId = 1,
                            TipoContactoId = 1,
                            Valor = "alfonso.coeto@guacamayotech.com",
                            Verificado = true
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            PersonaId = 2,
                            TipoContactoId = 1,
                            Valor = "admin@test.com",
                            Verificado = true
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.Direccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ciudad");

                    b.Property<string>("CodigoPostal")
                        .HasColumnType("text")
                        .HasColumnName("codigo_postal");

                    b.Property<string>("Colonia")
                        .HasColumnType("text")
                        .HasColumnName("colonia");

                    b.Property<string>("DireccionCompleta")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccion_completa");

                    b.Property<int>("EntidadFederativaId")
                        .HasColumnType("integer")
                        .HasColumnName("entidad_federativa_id");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<string>("Latitud")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("latitud");

                    b.Property<string>("Longitud")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("longitud");

                    b.Property<string>("NombreCalle")
                        .HasColumnType("text")
                        .HasColumnName("nombre_calle");

                    b.Property<string>("NumeroCalle")
                        .HasColumnType("text")
                        .HasColumnName("numero_calle");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pais");

                    b.Property<int>("PersonaId")
                        .HasColumnType("integer")
                        .HasColumnName("persona_id");

                    b.HasKey("Id")
                        .HasName("pk_direccion");

                    b.HasIndex("EntidadFederativaId")
                        .HasDatabaseName("ix_direccion_entidad_federativa_id");

                    b.HasIndex("PersonaId")
                        .HasDatabaseName("ix_direccion_persona_id");

                    b.HasIndex("Id", "PersonaId")
                        .IsUnique()
                        .HasDatabaseName("ix_direccion_id_persona_id");

                    b.ToTable("direccion", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.EntidadFederativa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("iso_code");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_entidad_federativa");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_entidad_federativa_id");

                    b.ToTable("entidad_federativa", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2514),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2515),
                            IsoCode = "AGS",
                            Nombre = "Aguascalientes"
                        },
                        new
                        {
                            Id = 2,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2520),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2521),
                            IsoCode = "BC",
                            Nombre = "Baja California"
                        },
                        new
                        {
                            Id = 3,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2522),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2522),
                            IsoCode = "BCS",
                            Nombre = "Baja California Sur"
                        },
                        new
                        {
                            Id = 4,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2522),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2523),
                            IsoCode = "CAM",
                            Nombre = "Campeche"
                        },
                        new
                        {
                            Id = 5,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2523),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2523),
                            IsoCode = "COA",
                            Nombre = "Coahuila"
                        },
                        new
                        {
                            Id = 6,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2524),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2525),
                            IsoCode = "COL",
                            Nombre = "Colima"
                        },
                        new
                        {
                            Id = 7,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2525),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2526),
                            IsoCode = "CHIS",
                            Nombre = "Chiapas"
                        },
                        new
                        {
                            Id = 8,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2526),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2526),
                            IsoCode = "CHIH",
                            Nombre = "Chihuahua"
                        },
                        new
                        {
                            Id = 9,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2527),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2527),
                            IsoCode = "CDMX",
                            Nombre = "Ciudad de México"
                        },
                        new
                        {
                            Id = 10,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2528),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2529),
                            IsoCode = "DGO",
                            Nombre = "Durango"
                        },
                        new
                        {
                            Id = 11,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2529),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2530),
                            IsoCode = "GTO",
                            Nombre = "Guanajuato"
                        },
                        new
                        {
                            Id = 12,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2530),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2530),
                            IsoCode = "GRO",
                            Nombre = "Guerrero"
                        },
                        new
                        {
                            Id = 13,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2531),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2531),
                            IsoCode = "HGO",
                            Nombre = "Hidalgo"
                        },
                        new
                        {
                            Id = 14,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2532),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2532),
                            IsoCode = "JAL",
                            Nombre = "Jalisco"
                        },
                        new
                        {
                            Id = 15,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2533),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2533),
                            IsoCode = "MEX",
                            Nombre = "Estado de México"
                        },
                        new
                        {
                            Id = 16,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2534),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2534),
                            IsoCode = "MICH",
                            Nombre = "Michoacán"
                        },
                        new
                        {
                            Id = 17,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2534),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2535),
                            IsoCode = "MOR",
                            Nombre = "Morelos"
                        },
                        new
                        {
                            Id = 18,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2536),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2536),
                            IsoCode = "NAY",
                            Nombre = "Nayarit"
                        },
                        new
                        {
                            Id = 19,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2537),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2537),
                            IsoCode = "NL",
                            Nombre = "Nuevo León"
                        },
                        new
                        {
                            Id = 20,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2538),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2538),
                            IsoCode = "OAX",
                            Nombre = "Oaxaca"
                        },
                        new
                        {
                            Id = 21,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2538),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2539),
                            IsoCode = "PUE",
                            Nombre = "Puebla"
                        },
                        new
                        {
                            Id = 22,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2539),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2539),
                            IsoCode = "QRO",
                            Nombre = "Querétaro"
                        },
                        new
                        {
                            Id = 23,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2540),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2540),
                            IsoCode = "QROO",
                            Nombre = "Quintana Roo"
                        },
                        new
                        {
                            Id = 24,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2541),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2541),
                            IsoCode = "SLP",
                            Nombre = "San Luis Potosí"
                        },
                        new
                        {
                            Id = 25,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2542),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2542),
                            IsoCode = "SIN",
                            Nombre = "Sinaloa"
                        },
                        new
                        {
                            Id = 26,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2543),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2543),
                            IsoCode = "SON",
                            Nombre = "Sonora"
                        },
                        new
                        {
                            Id = 27,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2543),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2544),
                            IsoCode = "TAB",
                            Nombre = "Tabasco"
                        },
                        new
                        {
                            Id = 28,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2544),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2544),
                            IsoCode = "TAMPS",
                            Nombre = "Tamaulipas"
                        },
                        new
                        {
                            Id = 29,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2545),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2545),
                            IsoCode = "TLAX",
                            Nombre = "Tlaxcala"
                        },
                        new
                        {
                            Id = 30,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2546),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2546),
                            IsoCode = "VER",
                            Nombre = "Veracruz"
                        },
                        new
                        {
                            Id = 31,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2547),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2547),
                            IsoCode = "YUC",
                            Nombre = "Yucatán"
                        },
                        new
                        {
                            Id = 32,
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2548),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2548),
                            IsoCode = "ZAC",
                            Nombre = "Zacatecas"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.EntidadFederativaGrupoEntidadFederativa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EntidadFederativaId")
                        .HasColumnType("integer")
                        .HasColumnName("entidad_federativa_id");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<int>("GrupoEntidadFederativaId")
                        .HasColumnType("integer")
                        .HasColumnName("grupo_entidad_federativa_id");

                    b.HasKey("Id")
                        .HasName("pk_entidad_federativa_grupo_entidad_federativa");

                    b.HasIndex("EntidadFederativaId")
                        .HasDatabaseName("ix_entidad_federativa_grupo_entidad_federativa_entidad_federat");

                    b.HasIndex("GrupoEntidadFederativaId")
                        .HasDatabaseName("ix_entidad_federativa_grupo_entidad_federativa_grupo_entidad_f");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_entidad_federativa_grupo_entidad_federativa_id");

                    b.ToTable("entidad_federativa_grupo_entidad_federativa", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.Escolaridad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_escolaridad");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_escolaridad_id");

                    b.ToTable("escolaridad", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Nombre = "Primaria"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Nombre = "Secundaria"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Nombre = "Preparatoria o Bachiller"
                        },
                        new
                        {
                            Id = 4,
                            Activo = true,
                            Nombre = "Técnico superior"
                        },
                        new
                        {
                            Id = 5,
                            Activo = true,
                            Nombre = "Licenciatura"
                        },
                        new
                        {
                            Id = 6,
                            Activo = true,
                            Nombre = "Posgrado"
                        },
                        new
                        {
                            Id = 7,
                            Activo = true,
                            Nombre = "Otro"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.Evento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<bool>("CheckInRequerido")
                        .HasColumnType("boolean")
                        .HasColumnName("check_in_requerido");

                    b.Property<bool>("CupoLimitado")
                        .HasColumnType("boolean")
                        .HasColumnName("cupo_limitado");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccion");

                    b.Property<int>("EventoTipoId")
                        .HasColumnType("integer")
                        .HasColumnName("evento_tipo_id");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_eliminacion");

                    b.Property<DateTime>("FechaEvento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_evento");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<string>("Imagen")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("imagen");

                    b.Property<string>("Latitud")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("latitud");

                    b.Property<string>("Longitud")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("longitud");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<int>("NumeroAsistentes")
                        .HasColumnType("integer")
                        .HasColumnName("numero_asistentes");

                    b.Property<int>("PersonaId")
                        .HasColumnType("integer")
                        .HasColumnName("responsable_id")
                        .HasComment("Persona que creo el evento o es el responsable del mismo");

                    b.Property<int>("Privacidad")
                        .HasColumnType("integer")
                        .HasColumnName("privacidad")
                        .HasComment("1 = Publico, 2 = Lista de invitados, 3 = Privado");

                    b.HasKey("Id")
                        .HasName("pk_evento");

                    b.HasIndex("EventoTipoId")
                        .HasDatabaseName("ix_evento_evento_tipo_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_evento_id");

                    b.HasIndex("PersonaId")
                        .HasDatabaseName("ix_evento_responsable_id");

                    b.ToTable("evento", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.EventoTipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Imagen")
                        .HasColumnType("text")
                        .HasColumnName("imagen");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<bool>("TipoSesion")
                        .HasColumnType("boolean")
                        .HasColumnName("tipo_sesion")
                        .HasComment("True = Sesion, False = Evento");

                    b.HasKey("Id")
                        .HasName("pk_evento_tipo");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_evento_tipo_id");

                    b.ToTable("evento_tipo", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Descripcion = "Este es un evento público.",
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2499),
                            Imagen = "https://i.imgur.com/4ZQZ5Zu.png",
                            Nombre = "Público General",
                            TipoSesion = false
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Descripcion = "Este es un evento para afiliados.",
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2502),
                            Imagen = "https://i.imgur.com/4ZQZ5Zu.png",
                            Nombre = "Afiliados",
                            TipoSesion = false
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Descripcion = "Este es un evento de tipo sesión.",
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2503),
                            Imagen = "https://i.imgur.com/4ZQZ5Zu.png",
                            Nombre = "Sesión",
                            TipoSesion = true
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.Genero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_genero");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_genero_id");

                    b.ToTable("genero", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Nombre = "Masculino"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Nombre = "Femenino"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Nombre = "Chico"
                        },
                        new
                        {
                            Id = 4,
                            Activo = true,
                            Nombre = "Chica"
                        },
                        new
                        {
                            Id = 5,
                            Activo = true,
                            Nombre = "Bigénero"
                        },
                        new
                        {
                            Id = 6,
                            Activo = true,
                            Nombre = "Intersexual"
                        },
                        new
                        {
                            Id = 7,
                            Activo = true,
                            Nombre = "No binario"
                        },
                        new
                        {
                            Id = 8,
                            Activo = true,
                            Nombre = "Sin género"
                        },
                        new
                        {
                            Id = 9,
                            Activo = true,
                            Nombre = "No estoy seguro"
                        },
                        new
                        {
                            Id = 10,
                            Activo = true,
                            Nombre = "Prefiero no decir"
                        },
                        new
                        {
                            Id = 11,
                            Activo = true,
                            Nombre = "Otro"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.GrupoCausa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("UrlImagen")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url_imagen");

                    b.HasKey("Id")
                        .HasName("pk_grupo_causa");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_grupo_causa_id");

                    b.ToTable("grupo_causa", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.GrupoEntidadFederativa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Distrito")
                        .HasColumnType("text")
                        .HasColumnName("distrito");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<string>("Manzana")
                        .HasColumnType("text")
                        .HasColumnName("manzana");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("Seccion")
                        .HasColumnType("text")
                        .HasColumnName("seccion");

                    b.Property<string>("Zona")
                        .HasColumnType("text")
                        .HasColumnName("zona");

                    b.HasKey("Id")
                        .HasName("pk_grupo_entidad_federativa");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_grupo_entidad_federativa_id");

                    b.ToTable("grupo_entidad_federativa", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.GrupoIntereses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("UrlImagen")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url_imagen");

                    b.HasKey("Id")
                        .HasName("pk_grupo_intereses");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_grupo_intereses_id");

                    b.ToTable("grupo_intereses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Nombre = "Economía",
                            UrlImagen = "https://images.unsplash.com/photo-1588591795084-1770cb3be374?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2070&q=80"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Nombre = "Fotografía",
                            UrlImagen = "https://images.unsplash.com/photo-1588591795084-1770cb3be374?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2070&q=80"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Nombre = "Viajes",
                            UrlImagen = "https://images.unsplash.com/photo-1588591795084-1770cb3be374?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2070&q=80"
                        },
                        new
                        {
                            Id = 4,
                            Activo = true,
                            Nombre = "Medio Ambiente",
                            UrlImagen = "https://images.unsplash.com/photo-1588591795084-1770cb3be374?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2070&q=80"
                        },
                        new
                        {
                            Id = 5,
                            Activo = true,
                            Nombre = "Cocina",
                            UrlImagen = "https://images.unsplash.com/photo-1588591795084-1770cb3be374?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2070&q=80"
                        },
                        new
                        {
                            Id = 6,
                            Activo = true,
                            Nombre = "Tecnología",
                            UrlImagen = "https://images.unsplash.com/photo-1588591795084-1770cb3be374?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2070&q=80"
                        },
                        new
                        {
                            Id = 7,
                            Activo = true,
                            Nombre = "Moda",
                            UrlImagen = "https://images.unsplash.com/photo-1588591795084-1770cb3be374?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2070&q=80"
                        },
                        new
                        {
                            Id = 8,
                            Activo = true,
                            Nombre = "Juegos",
                            UrlImagen = "https://images.unsplash.com/photo-1588591795084-1770cb3be374?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2070&q=80"
                        },
                        new
                        {
                            Id = 9,
                            Activo = true,
                            Nombre = "Otros",
                            UrlImagen = "https://images.unsplash.com/photo-1588591795084-1770cb3be374?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2070&q=80"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.Habilidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_habilidad");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_habilidad_id");

                    b.ToTable("habilidad", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Nombre = "Comunicación efectiva"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Nombre = "Creatividad"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Nombre = "Inteligencia emocional"
                        },
                        new
                        {
                            Id = 4,
                            Activo = true,
                            Nombre = "Interpretación de datos"
                        },
                        new
                        {
                            Id = 5,
                            Activo = true,
                            Nombre = "Negociación"
                        },
                        new
                        {
                            Id = 6,
                            Activo = true,
                            Nombre = "Organización"
                        },
                        new
                        {
                            Id = 7,
                            Activo = true,
                            Nombre = "Resiliencia"
                        },
                        new
                        {
                            Id = 8,
                            Activo = true,
                            Nombre = "Resolución de problemas"
                        },
                        new
                        {
                            Id = 9,
                            Activo = true,
                            Nombre = "Toma de decisiones"
                        },
                        new
                        {
                            Id = 10,
                            Activo = true,
                            Nombre = "Trabajo en equipo"
                        },
                        new
                        {
                            Id = 11,
                            Activo = true,
                            Nombre = "Otro"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.HabilidadCustom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<int>("PersonaId")
                        .HasColumnType("integer")
                        .HasColumnName("persona_id");

                    b.HasKey("Id")
                        .HasName("pk_habilidad_custom");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_habilidad_custom_id");

                    b.HasIndex("PersonaId")
                        .HasDatabaseName("ix_habilidad_custom_persona_id");

                    b.ToTable("habilidad_custom", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.Interes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_interes");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_interes_id");

                    b.ToTable("interes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Nombre = "Inversiones"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Nombre = "Acciones"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Nombre = "Emancipación"
                        },
                        new
                        {
                            Id = 4,
                            Activo = true,
                            Nombre = "Criptomonedas"
                        },
                        new
                        {
                            Id = 5,
                            Activo = true,
                            Nombre = "Finanzas"
                        },
                        new
                        {
                            Id = 6,
                            Activo = true,
                            Nombre = "Trading"
                        },
                        new
                        {
                            Id = 7,
                            Activo = true,
                            Nombre = "Fotografía artística"
                        },
                        new
                        {
                            Id = 8,
                            Activo = true,
                            Nombre = "Fotografía conceptual"
                        },
                        new
                        {
                            Id = 9,
                            Activo = true,
                            Nombre = "Fotografía en blanco y negro"
                        },
                        new
                        {
                            Id = 10,
                            Activo = true,
                            Nombre = "Fotografía minimalista"
                        },
                        new
                        {
                            Id = 11,
                            Activo = true,
                            Nombre = "Fotografía abstracta"
                        },
                        new
                        {
                            Id = 12,
                            Activo = true,
                            Nombre = "Fotografía de retrato"
                        },
                        new
                        {
                            Id = 13,
                            Activo = true,
                            Nombre = "Turismo de aventura"
                        },
                        new
                        {
                            Id = 14,
                            Activo = true,
                            Nombre = "Turismo rural"
                        },
                        new
                        {
                            Id = 15,
                            Activo = true,
                            Nombre = "Turismo de naturaleza"
                        },
                        new
                        {
                            Id = 16,
                            Activo = true,
                            Nombre = "Turismo paranormal"
                        },
                        new
                        {
                            Id = 17,
                            Activo = true,
                            Nombre = "Movimientos para cuidado del agua"
                        },
                        new
                        {
                            Id = 18,
                            Activo = true,
                            Nombre = "Concientización de cambio climático"
                        },
                        new
                        {
                            Id = 19,
                            Activo = true,
                            Nombre = "Control de plagas"
                        },
                        new
                        {
                            Id = 20,
                            Activo = true,
                            Nombre = "Solidaridad en desastres naturales"
                        },
                        new
                        {
                            Id = 21,
                            Activo = true,
                            Nombre = "Protección de flora y fauna"
                        },
                        new
                        {
                            Id = 22,
                            Activo = true,
                            Nombre = "Cocina tradicional"
                        },
                        new
                        {
                            Id = 23,
                            Activo = true,
                            Nombre = "Cocina recreativa"
                        },
                        new
                        {
                            Id = 24,
                            Activo = true,
                            Nombre = "Alta cocina"
                        },
                        new
                        {
                            Id = 25,
                            Activo = true,
                            Nombre = "Comida italiana"
                        },
                        new
                        {
                            Id = 26,
                            Activo = true,
                            Nombre = "Comida libanesa"
                        },
                        new
                        {
                            Id = 27,
                            Activo = true,
                            Nombre = "Comida japonesa"
                        },
                        new
                        {
                            Id = 28,
                            Activo = true,
                            Nombre = "Comida peruana"
                        },
                        new
                        {
                            Id = 29,
                            Activo = true,
                            Nombre = "Comida mexicana"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.InteresGrupoIntereses", b =>
                {
                    b.Property<int>("InteresId")
                        .HasColumnType("integer")
                        .HasColumnName("interes_id");

                    b.Property<int>("GrupoInteresesId")
                        .HasColumnType("integer")
                        .HasColumnName("grupo_intereses_id");

                    b.HasKey("InteresId", "GrupoInteresesId")
                        .HasName("pk_interes_grupo_intereses");

                    b.ToTable("interes_grupo_intereses", (string)null);

                    b.HasData(
                        new
                        {
                            InteresId = 1,
                            GrupoInteresesId = 1
                        },
                        new
                        {
                            InteresId = 2,
                            GrupoInteresesId = 1
                        },
                        new
                        {
                            InteresId = 3,
                            GrupoInteresesId = 1
                        },
                        new
                        {
                            InteresId = 4,
                            GrupoInteresesId = 1
                        },
                        new
                        {
                            InteresId = 5,
                            GrupoInteresesId = 1
                        },
                        new
                        {
                            InteresId = 6,
                            GrupoInteresesId = 1
                        },
                        new
                        {
                            InteresId = 7,
                            GrupoInteresesId = 2
                        },
                        new
                        {
                            InteresId = 8,
                            GrupoInteresesId = 2
                        },
                        new
                        {
                            InteresId = 9,
                            GrupoInteresesId = 2
                        },
                        new
                        {
                            InteresId = 10,
                            GrupoInteresesId = 2
                        },
                        new
                        {
                            InteresId = 11,
                            GrupoInteresesId = 2
                        },
                        new
                        {
                            InteresId = 12,
                            GrupoInteresesId = 2
                        },
                        new
                        {
                            InteresId = 13,
                            GrupoInteresesId = 3
                        },
                        new
                        {
                            InteresId = 14,
                            GrupoInteresesId = 3
                        },
                        new
                        {
                            InteresId = 15,
                            GrupoInteresesId = 3
                        },
                        new
                        {
                            InteresId = 16,
                            GrupoInteresesId = 3
                        },
                        new
                        {
                            InteresId = 17,
                            GrupoInteresesId = 4
                        },
                        new
                        {
                            InteresId = 18,
                            GrupoInteresesId = 4
                        },
                        new
                        {
                            InteresId = 19,
                            GrupoInteresesId = 4
                        },
                        new
                        {
                            InteresId = 20,
                            GrupoInteresesId = 4
                        },
                        new
                        {
                            InteresId = 21,
                            GrupoInteresesId = 4
                        },
                        new
                        {
                            InteresId = 22,
                            GrupoInteresesId = 5
                        },
                        new
                        {
                            InteresId = 23,
                            GrupoInteresesId = 5
                        },
                        new
                        {
                            InteresId = 24,
                            GrupoInteresesId = 5
                        },
                        new
                        {
                            InteresId = 25,
                            GrupoInteresesId = 5
                        },
                        new
                        {
                            InteresId = 26,
                            GrupoInteresesId = 5
                        },
                        new
                        {
                            InteresId = 27,
                            GrupoInteresesId = 5
                        },
                        new
                        {
                            InteresId = 28,
                            GrupoInteresesId = 5
                        },
                        new
                        {
                            InteresId = 29,
                            GrupoInteresesId = 5
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.Invitado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("ApellidoMaterno")
                        .HasColumnType("text")
                        .HasColumnName("apellido_materno");

                    b.Property<string>("ApellidoPaterno")
                        .HasColumnType("text")
                        .HasColumnName("apellido_paterno");

                    b.Property<string>("CargoOrganizacion")
                        .HasColumnType("text")
                        .HasColumnName("cargo_organizacion")
                        .HasComment("El cargo u organización a la que pertenece el invitado");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("EntidadFederativa")
                        .HasColumnType("text")
                        .HasColumnName("entidad_federativa");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_nacimiento");

                    b.Property<string>("ModoParticipacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("modo_participacion")
                        .HasComment("Puede ser: 'Presencial', 'Virtual' o 'Ambos'");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("Sexo")
                        .HasColumnType("text")
                        .HasColumnName("sexo");

                    b.Property<string>("Telefono")
                        .HasColumnType("text")
                        .HasColumnName("telefono");

                    b.HasKey("Id")
                        .HasName("pk_invitado");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_invitado_id");

                    b.ToTable("invitado", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.Motivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_motivo");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_motivo_id");

                    b.ToTable("motivo", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Nombre = "Voluntario"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Nombre = "Servicio Social"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Nombre = "Prácticas Profesionales"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.MotivoBaja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_motivo_baja");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_motivo_baja_id");

                    b.ToTable("motivo_baja", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApellidoMaterno")
                        .HasColumnType("text")
                        .HasColumnName("apellido_materno");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("apellido_paterno");

                    b.Property<string>("Curp")
                        .HasColumnType("text")
                        .HasColumnName("curp");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_nacimiento");

                    b.Property<string>("FirmaElectronica")
                        .HasColumnType("text")
                        .HasColumnName("firma_electronica");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_persona");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_persona_id");

                    b.ToTable("persona", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApellidoMaterno = "Coeto",
                            ApellidoPaterno = "Gomez",
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2564),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2565),
                            FechaNacimiento = new DateTime(1994, 7, 24, 22, 0, 0, 0, DateTimeKind.Utc),
                            Nombre = "Jose Alfonso"
                        },
                        new
                        {
                            Id = 2,
                            ApellidoPaterno = "Naranja",
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2717),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(2718),
                            FechaNacimiento = new DateTime(2000, 1, 1, 22, 0, 0, 0, DateTimeKind.Utc),
                            Nombre = "Admin"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.PersonaCausa", b =>
                {
                    b.Property<int>("PersonaId")
                        .HasColumnType("integer")
                        .HasColumnName("persona_id");

                    b.Property<int>("CausaId")
                        .HasColumnType("integer")
                        .HasColumnName("causa_id");

                    b.HasKey("PersonaId", "CausaId")
                        .HasName("pk_persona_causa");

                    b.ToTable("persona_causa", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.PersonaCodigoInvitacion", b =>
                {
                    b.Property<int>("CodigoInvitacionId")
                        .HasColumnType("integer")
                        .HasColumnName("codigo_invitacion_id");

                    b.Property<int>("PersonaId")
                        .HasColumnType("integer")
                        .HasColumnName("persona_id");

                    b.Property<DateTime?>("FechaAceptado")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_aceptado");

                    b.HasKey("CodigoInvitacionId", "PersonaId")
                        .HasName("pk_persona_codigo_invitacion");

                    b.ToTable("persona_codigo_invitacion", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.PersonaEscolaridad", b =>
                {
                    b.Property<int>("PersonaId")
                        .HasColumnType("integer")
                        .HasColumnName("persona_id");

                    b.Property<int>("EscolaridadId")
                        .HasColumnType("integer")
                        .HasColumnName("escolaridad_id");

                    b.HasKey("PersonaId", "EscolaridadId")
                        .HasName("pk_persona_escolaridad");

                    b.ToTable("persona_escolaridad", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.PersonaGenero", b =>
                {
                    b.Property<int>("PersonaId")
                        .HasColumnType("integer")
                        .HasColumnName("persona_id");

                    b.Property<int>("GeneroId")
                        .HasColumnType("integer")
                        .HasColumnName("genero_id");

                    b.HasKey("PersonaId", "GeneroId")
                        .HasName("pk_persona_genero");

                    b.ToTable("persona_genero", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.PersonaHabilidad", b =>
                {
                    b.Property<int>("PersonaId")
                        .HasColumnType("integer")
                        .HasColumnName("persona_id");

                    b.Property<int>("HabilidadId")
                        .HasColumnType("integer")
                        .HasColumnName("habilidad_id");

                    b.HasKey("PersonaId", "HabilidadId")
                        .HasName("pk_persona_habilidad");

                    b.ToTable("persona_habilidad", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.PersonaInteres", b =>
                {
                    b.Property<int>("PersonaId")
                        .HasColumnType("integer")
                        .HasColumnName("persona_id");

                    b.Property<int>("InteresId")
                        .HasColumnType("integer")
                        .HasColumnName("interes_id");

                    b.HasKey("PersonaId", "InteresId")
                        .HasName("pk_persona_interes");

                    b.ToTable("persona_interes", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.PersonaMotivo", b =>
                {
                    b.Property<int>("PersonaId")
                        .HasColumnType("integer")
                        .HasColumnName("persona_id");

                    b.Property<int>("MotivoId")
                        .HasColumnType("integer")
                        .HasColumnName("motivo_id");

                    b.HasKey("PersonaId", "MotivoId")
                        .HasName("pk_persona_motivo");

                    b.ToTable("persona_motivo", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.TipoContacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<bool>("EsEmail")
                        .HasColumnType("boolean")
                        .HasColumnName("es_email");

                    b.Property<bool>("EsOtro")
                        .HasColumnType("boolean")
                        .HasColumnName("es_otro");

                    b.Property<bool>("EsTelefono")
                        .HasColumnType("boolean")
                        .HasColumnName("es_telefono");

                    b.Property<bool>("EsWhatsapp")
                        .HasColumnType("boolean")
                        .HasColumnName("es_whatsapp")
                        .HasComment("Si es un telefono, se define si este tiene whatsapp o no");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_tipo_contacto");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_tipo_contacto_id");

                    b.ToTable("tipo_contacto", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            EsEmail = true,
                            EsOtro = true,
                            EsTelefono = false,
                            EsWhatsapp = false,
                            Nombre = "Correo electrónico"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            EsEmail = false,
                            EsOtro = true,
                            EsTelefono = true,
                            EsWhatsapp = false,
                            Nombre = "Teléfono"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            EsEmail = false,
                            EsOtro = true,
                            EsTelefono = true,
                            EsWhatsapp = true,
                            Nombre = "WhatsApp"
                        },
                        new
                        {
                            Id = 4,
                            Activo = true,
                            EsEmail = false,
                            EsOtro = true,
                            EsTelefono = false,
                            EsWhatsapp = false,
                            Nombre = "Otro"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Rol")
                        .HasColumnType("text")
                        .HasColumnName("rol");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_usuario");

                    b.ToTable("usuario", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "alfonso.coeto@guacamayotech.com",
                            FechaCreacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(1603),
                            FechaModificacion = new DateTime(2023, 3, 14, 10, 22, 31, 164, DateTimeKind.Utc).AddTicks(1606),
                            Password = "c12fd9d663f595285f8ebffcb3c9b3144cd6d96f2c3acfa8293162fb701c871739378aa6ab073590d99057ec2a34eec3dd2c30899cce81501bea1837a916c997",
                            Rol = "Super Administrador",
                            UserName = "poncho.admin"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.BajasSistema", b =>
                {
                    b.HasOne("MC_Universo_API.Models.MotivoBaja", "MotivoBaja")
                        .WithMany()
                        .HasForeignKey("MotivoBajaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bajas_sistema_motivo_baja_motivo_baja_id");

                    b.HasOne("MC_Universo_API.Models.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bajas_sistema_persona_persona_id");

                    b.Navigation("MotivoBaja");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("MC_Universo_API.Models.CodigoInvitacion", b =>
                {
                    b.HasOne("MC_Universo_API.Models.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_codigo_invitacion_persona_sponsor_id");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("MC_Universo_API.Models.DatoContacto", b =>
                {
                    b.HasOne("MC_Universo_API.Models.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dato_contacto_persona_persona_id");

                    b.HasOne("MC_Universo_API.Models.TipoContacto", "TipoContacto")
                        .WithMany()
                        .HasForeignKey("TipoContactoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dato_contacto_tipo_contacto_tipo_contacto_id");

                    b.Navigation("Persona");

                    b.Navigation("TipoContacto");
                });

            modelBuilder.Entity("MC_Universo_API.Models.Direccion", b =>
                {
                    b.HasOne("MC_Universo_API.Models.EntidadFederativa", "EntidadFederativa")
                        .WithMany()
                        .HasForeignKey("EntidadFederativaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_direccion_entidad_federativa_entidad_federativa_id");

                    b.HasOne("MC_Universo_API.Models.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_direccion_persona_persona_id");

                    b.Navigation("EntidadFederativa");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("MC_Universo_API.Models.EntidadFederativaGrupoEntidadFederativa", b =>
                {
                    b.HasOne("MC_Universo_API.Models.EntidadFederativa", "EntidadFederativa")
                        .WithMany()
                        .HasForeignKey("EntidadFederativaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_entidad_federativa_grupo_entidad_federativa_entidad_federat");

                    b.HasOne("MC_Universo_API.Models.GrupoEntidadFederativa", "GrupoEntidadFederativa")
                        .WithMany()
                        .HasForeignKey("GrupoEntidadFederativaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_entidad_federativa_grupo_entidad_federativa_grupo_entidad_f");

                    b.Navigation("EntidadFederativa");

                    b.Navigation("GrupoEntidadFederativa");
                });

            modelBuilder.Entity("MC_Universo_API.Models.Evento", b =>
                {
                    b.HasOne("MC_Universo_API.Models.EventoTipo", "EventoTipo")
                        .WithMany()
                        .HasForeignKey("EventoTipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_evento_evento_tipo_evento_tipo_id");

                    b.HasOne("MC_Universo_API.Models.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_evento_persona_responsable_id");

                    b.Navigation("EventoTipo");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("MC_Universo_API.Models.HabilidadCustom", b =>
                {
                    b.HasOne("MC_Universo_API.Models.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_habilidad_custom_persona_persona_id");

                    b.Navigation("Persona");
                });
#pragma warning restore 612, 618
        }
    }
}
