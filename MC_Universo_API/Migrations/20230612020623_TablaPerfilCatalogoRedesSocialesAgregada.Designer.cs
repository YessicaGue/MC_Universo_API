// <auto-generated />
using System;
using MC_Universo_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MC_Universo_API.Migrations
{
    [DbContext(typeof(UniversoContext))]
    [Migration("20230612020623_TablaPerfilCatalogoRedesSocialesAgregada")]
    partial class TablaPerfilCatalogoRedesSocialesAgregada
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MC_Universo_API.Models.Archivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Directorio")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("directorio");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<bool>("esPublico")
                        .HasColumnType("boolean")
                        .HasColumnName("es_publico");

                    b.HasKey("Id")
                        .HasName("pk_archivo");

                    b.ToTable("archivo", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_area");

                    b.ToTable("area", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(2009),
                            Nombre = "Jóvenes"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(2017),
                            Nombre = "Mujeres"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.BajasSistema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaBaja")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_baja");

                    b.Property<int>("MotivoBajaId")
                        .HasColumnType("integer")
                        .HasColumnName("motivo_baja_id");

                    b.Property<int>("PersonaId")
                        .HasColumnType("integer")
                        .HasColumnName("persona_id")
                        .HasComment("Id de la persona que se dio de baja");

                    b.HasKey("Id")
                        .HasName("pk_bajas_sistema");

                    b.HasIndex("MotivoBajaId")
                        .HasDatabaseName("ix_bajas_sistema_motivo_baja_id");

                    b.HasIndex("PersonaId")
                        .HasDatabaseName("ix_bajas_sistema_persona_id");

                    b.HasIndex("Id", "PersonaId")
                        .IsUnique()
                        .HasDatabaseName("ix_bajas_sistema_id_persona_id");

                    b.ToTable("bajas_sistema", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.CatalogoCategoriasPreguntasEncuestas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_catalogo_categorias_preguntas_encuestas");

                    b.ToTable("catalogo_categorias_preguntas_encuestas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1857),
                            Nombre = "Coordinación"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.CatalogoConfiguraciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Nombre")
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("valor");

                    b.HasKey("Id")
                        .HasName("pk_catalogo_configuraciones");

                    b.ToTable("catalogo_configuraciones", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(2269),
                            Nombre = "client_id",
                            Valor = "10"
                        },
                        new
                        {
                            Id = 2,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(2275),
                            Nombre = "client_secret",
                            Valor = "Ji28k8iPYrUqDTGCiIQCjZAZL4NZGAaez8W6C2PL"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.CatalogoEstatusVoluntario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_catalogo_estatus_voluntario");

                    b.ToTable("catalogo_estatus_voluntario", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1966),
                            Nombre = "Por validar"
                        },
                        new
                        {
                            Id = 2,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1973),
                            Nombre = "Inválido"
                        },
                        new
                        {
                            Id = 3,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1974),
                            Nombre = "Válido"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.CatalogoOchoAcciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_catalogo_ocho_acciones");

                    b.ToTable("catalogo_ocho_acciones", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(2126),
                            Nombre = "El movimiento escucha"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(2130),
                            Nombre = "La quincena"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(2131),
                            Nombre = "Picnic naranja"
                        },
                        new
                        {
                            Id = 4,
                            Activo = true,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(2131),
                            Nombre = "Pinta el futuro"
                        },
                        new
                        {
                            Id = 5,
                            Activo = true,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(2132),
                            Nombre = "Escuela naranja"
                        },
                        new
                        {
                            Id = 6,
                            Activo = true,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(2133),
                            Nombre = "Barrio naranja"
                        },
                        new
                        {
                            Id = 7,
                            Activo = true,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(2134),
                            Nombre = "Mercadito naranja"
                        },
                        new
                        {
                            Id = 8,
                            Activo = true,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(2135),
                            Nombre = "Casas naranjas"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.CatalogoPreguntasEncuestas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<int>("CategoriaPreguntaId")
                        .HasColumnType("integer")
                        .HasColumnName("categoria_pregunta_id");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_catalogo_preguntas_encuestas");

                    b.HasIndex("CategoriaPreguntaId")
                        .HasDatabaseName("ix_catalogo_preguntas_encuestas_categoria_pregunta_id");

                    b.ToTable("catalogo_preguntas_encuestas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoriaPreguntaId = 1,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1909),
                            Nombre = "Platícanos tus necesidades de capacitación o certifícate con CONOCER"
                        },
                        new
                        {
                            Id = 2,
                            CategoriaPreguntaId = 1,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1919),
                            Nombre = "Dentro de tus conocimientos profesionales, ¿Te gustaría desarrollar algún curso?"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.CatalogoPreguntasOchoAcciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_catalogo_preguntas_ocho_acciones");

                    b.ToTable("catalogo_preguntas_ocho_acciones", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(2179),
                            Nombre = "¿Cómo quieres participar?"
                        },
                        new
                        {
                            Id = 2,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(2184),
                            Nombre = "¿Cómo propones hacerlo?"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.CatalogoPublicaciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_catalogo_publicaciones");

                    b.ToTable("catalogo_publicaciones", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(2229),
                            Nombre = "Mi liderazgo"
                        },
                        new
                        {
                            Id = 2,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(2238),
                            Nombre = "Mi círculo"
                        },
                        new
                        {
                            Id = 3,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(2239),
                            Nombre = "Mi comunidad"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.CatalogoRedesSociales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_catalogo_redes_sociales");

                    b.ToTable("catalogo_redes_sociales", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(2322),
                            Nombre = "Facebook"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(2326),
                            Nombre = "Instagram"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(2327),
                            Nombre = "Twitter"
                        },
                        new
                        {
                            Id = 4,
                            Activo = true,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(2327),
                            Nombre = "TikTok"
                        },
                        new
                        {
                            Id = 5,
                            Activo = true,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(2328),
                            Nombre = "WhatsApp"
                        },
                        new
                        {
                            Id = 6,
                            Activo = true,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(2329),
                            Nombre = "LinkedIn"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.Causa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_causa");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_causa_id");

                    b.ToTable("causa", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Nombre = "Diversidad sexual"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Nombre = "Energías limpias"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Nombre = "Infancias"
                        },
                        new
                        {
                            Id = 4,
                            Activo = true,
                            Nombre = "Ingreso vital"
                        },
                        new
                        {
                            Id = 5,
                            Activo = true,
                            Nombre = "Justicia climática (emergencia climática)"
                        },
                        new
                        {
                            Id = 6,
                            Activo = true,
                            Nombre = "Juventudes"
                        },
                        new
                        {
                            Id = 7,
                            Activo = true,
                            Nombre = "Legalización"
                        },
                        new
                        {
                            Id = 8,
                            Activo = true,
                            Nombre = "Mujeres"
                        },
                        new
                        {
                            Id = 9,
                            Activo = true,
                            Nombre = "Paz"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.CausaGrupoCausa", b =>
                {
                    b.Property<int>("CausaId")
                        .HasColumnType("integer")
                        .HasColumnName("causa_id");

                    b.Property<int>("GrupoCausaId")
                        .HasColumnType("integer")
                        .HasColumnName("grupo_causa_id");

                    b.HasKey("CausaId", "GrupoCausaId")
                        .HasName("pk_causa_grupo_causa");

                    b.ToTable("causa_grupo_causa", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.CodigoInvitacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<Guid>("Codigo")
                        .HasColumnType("uuid")
                        .HasColumnName("codigo");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<int>("PersonaId")
                        .HasColumnType("integer")
                        .HasColumnName("sponsor_id");

                    b.HasKey("Id")
                        .HasName("pk_codigo_invitacion");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_codigo_invitacion_id");

                    b.HasIndex("PersonaId")
                        .HasDatabaseName("ix_codigo_invitacion_sponsor_id");

                    b.ToTable("codigo_invitacion", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.DatoContacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<int>("PersonaId")
                        .HasColumnType("integer")
                        .HasColumnName("persona_id");

                    b.Property<int>("TipoContactoId")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_contacto_id");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("valor");

                    b.Property<bool>("Verificado")
                        .HasColumnType("boolean")
                        .HasColumnName("verificado");

                    b.HasKey("Id")
                        .HasName("pk_dato_contacto");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_dato_contacto_id");

                    b.HasIndex("PersonaId")
                        .HasDatabaseName("ix_dato_contacto_persona_id");

                    b.HasIndex("TipoContactoId")
                        .HasDatabaseName("ix_dato_contacto_tipo_contacto_id");

                    b.ToTable("dato_contacto", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            PersonaId = 1,
                            TipoContactoId = 1,
                            Valor = "alfonso.coeto@guacamayotech.com",
                            Verificado = true
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            PersonaId = 2,
                            TipoContactoId = 1,
                            Valor = "admin@test.com",
                            Verificado = true
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.Direccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ciudad");

                    b.Property<string>("CodigoPostal")
                        .HasColumnType("text")
                        .HasColumnName("codigo_postal");

                    b.Property<string>("Colonia")
                        .HasColumnType("text")
                        .HasColumnName("colonia");

                    b.Property<string>("DireccionCompleta")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccion_completa");

                    b.Property<int>("EntidadFederativaId")
                        .HasColumnType("integer")
                        .HasColumnName("entidad_federativa_id");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<string>("Latitud")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("latitud");

                    b.Property<string>("Longitud")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("longitud");

                    b.Property<string>("NombreCalle")
                        .HasColumnType("text")
                        .HasColumnName("nombre_calle");

                    b.Property<string>("NumeroCalle")
                        .HasColumnType("text")
                        .HasColumnName("numero_calle");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pais");

                    b.Property<int>("PersonaId")
                        .HasColumnType("integer")
                        .HasColumnName("persona_id");

                    b.HasKey("Id")
                        .HasName("pk_direccion");

                    b.HasIndex("EntidadFederativaId")
                        .HasDatabaseName("ix_direccion_entidad_federativa_id");

                    b.HasIndex("PersonaId")
                        .HasDatabaseName("ix_direccion_persona_id");

                    b.HasIndex("Id", "PersonaId")
                        .IsUnique()
                        .HasDatabaseName("ix_direccion_id_persona_id");

                    b.ToTable("direccion", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.Encuesta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id")
                        .HasName("pk_encuesta");

                    b.ToTable("encuesta", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.EntidadFederativa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("iso_code");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_entidad_federativa");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_entidad_federativa_id");

                    b.ToTable("entidad_federativa", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1080),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1081),
                            IsoCode = "AGS",
                            Nombre = "Aguascalientes"
                        },
                        new
                        {
                            Id = 2,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1086),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1086),
                            IsoCode = "BC",
                            Nombre = "Baja California"
                        },
                        new
                        {
                            Id = 3,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1087),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1088),
                            IsoCode = "BCS",
                            Nombre = "Baja California Sur"
                        },
                        new
                        {
                            Id = 4,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1088),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1089),
                            IsoCode = "CAM",
                            Nombre = "Campeche"
                        },
                        new
                        {
                            Id = 5,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1089),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1090),
                            IsoCode = "COA",
                            Nombre = "Coahuila"
                        },
                        new
                        {
                            Id = 6,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1096),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1096),
                            IsoCode = "COL",
                            Nombre = "Colima"
                        },
                        new
                        {
                            Id = 7,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1097),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1097),
                            IsoCode = "CHIS",
                            Nombre = "Chiapas"
                        },
                        new
                        {
                            Id = 8,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1098),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1098),
                            IsoCode = "CHIH",
                            Nombre = "Chihuahua"
                        },
                        new
                        {
                            Id = 9,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1099),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1099),
                            IsoCode = "CDMX",
                            Nombre = "Ciudad de México"
                        },
                        new
                        {
                            Id = 10,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1101),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1120),
                            IsoCode = "DGO",
                            Nombre = "Durango"
                        },
                        new
                        {
                            Id = 11,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1121),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1121),
                            IsoCode = "GTO",
                            Nombre = "Guanajuato"
                        },
                        new
                        {
                            Id = 12,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1122),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1122),
                            IsoCode = "GRO",
                            Nombre = "Guerrero"
                        },
                        new
                        {
                            Id = 13,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1123),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1123),
                            IsoCode = "HGO",
                            Nombre = "Hidalgo"
                        },
                        new
                        {
                            Id = 14,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1124),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1124),
                            IsoCode = "JAL",
                            Nombre = "Jalisco"
                        },
                        new
                        {
                            Id = 15,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1125),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1125),
                            IsoCode = "MEX",
                            Nombre = "Estado de México"
                        },
                        new
                        {
                            Id = 16,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1126),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1126),
                            IsoCode = "MICH",
                            Nombre = "Michoacán"
                        },
                        new
                        {
                            Id = 17,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1127),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1127),
                            IsoCode = "MOR",
                            Nombre = "Morelos"
                        },
                        new
                        {
                            Id = 18,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1129),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1129),
                            IsoCode = "NAY",
                            Nombre = "Nayarit"
                        },
                        new
                        {
                            Id = 19,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1130),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1130),
                            IsoCode = "NL",
                            Nombre = "Nuevo León"
                        },
                        new
                        {
                            Id = 20,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1131),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1131),
                            IsoCode = "OAX",
                            Nombre = "Oaxaca"
                        },
                        new
                        {
                            Id = 21,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1132),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1132),
                            IsoCode = "PUE",
                            Nombre = "Puebla"
                        },
                        new
                        {
                            Id = 22,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1133),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1133),
                            IsoCode = "QRO",
                            Nombre = "Querétaro"
                        },
                        new
                        {
                            Id = 23,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1134),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1134),
                            IsoCode = "QROO",
                            Nombre = "Quintana Roo"
                        },
                        new
                        {
                            Id = 24,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1135),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1135),
                            IsoCode = "SLP",
                            Nombre = "San Luis Potosí"
                        },
                        new
                        {
                            Id = 25,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1136),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1136),
                            IsoCode = "SIN",
                            Nombre = "Sinaloa"
                        },
                        new
                        {
                            Id = 26,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1137),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1137),
                            IsoCode = "SON",
                            Nombre = "Sonora"
                        },
                        new
                        {
                            Id = 27,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1138),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1138),
                            IsoCode = "TAB",
                            Nombre = "Tabasco"
                        },
                        new
                        {
                            Id = 28,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1139),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1139),
                            IsoCode = "TAMPS",
                            Nombre = "Tamaulipas"
                        },
                        new
                        {
                            Id = 29,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1140),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1140),
                            IsoCode = "TLAX",
                            Nombre = "Tlaxcala"
                        },
                        new
                        {
                            Id = 30,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1141),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1142),
                            IsoCode = "VER",
                            Nombre = "Veracruz"
                        },
                        new
                        {
                            Id = 31,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1142),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1143),
                            IsoCode = "YUC",
                            Nombre = "Yucatán"
                        },
                        new
                        {
                            Id = 32,
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1143),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1144),
                            IsoCode = "ZAC",
                            Nombre = "Zacatecas"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.EntidadFederativaGrupoEntidadFederativa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EntidadFederativaId")
                        .HasColumnType("integer")
                        .HasColumnName("entidad_federativa_id");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<int>("GrupoEntidadFederativaId")
                        .HasColumnType("integer")
                        .HasColumnName("grupo_entidad_federativa_id");

                    b.HasKey("Id")
                        .HasName("pk_entidad_federativa_grupo_entidad_federativa");

                    b.HasIndex("EntidadFederativaId")
                        .HasDatabaseName("ix_entidad_federativa_grupo_entidad_federativa_entidad_federat");

                    b.HasIndex("GrupoEntidadFederativaId")
                        .HasDatabaseName("ix_entidad_federativa_grupo_entidad_federativa_grupo_entidad_f");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_entidad_federativa_grupo_entidad_federativa_id");

                    b.ToTable("entidad_federativa_grupo_entidad_federativa", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.Escolaridad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_escolaridad");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_escolaridad_id");

                    b.ToTable("escolaridad", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Nombre = "Primaria"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Nombre = "Secundaria"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Nombre = "Preparatoria o Bachiller"
                        },
                        new
                        {
                            Id = 4,
                            Activo = true,
                            Nombre = "Técnico superior"
                        },
                        new
                        {
                            Id = 5,
                            Activo = true,
                            Nombre = "Licenciatura"
                        },
                        new
                        {
                            Id = 6,
                            Activo = true,
                            Nombre = "Posgrado"
                        },
                        new
                        {
                            Id = 7,
                            Activo = true,
                            Nombre = "Otro"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.Escucha", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApellidoMaterno")
                        .HasColumnType("text")
                        .HasColumnName("apellido_materno");

                    b.Property<string>("ApellidoPaterno")
                        .HasColumnType("text")
                        .HasColumnName("apellido_paterno");

                    b.Property<string>("Correo")
                        .HasColumnType("text")
                        .HasColumnName("correo");

                    b.Property<int?>("EntidadFederativaId")
                        .HasColumnType("integer")
                        .HasColumnName("entidad_federativa_id");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Nombre")
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("Respuesta")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("respuesta");

                    b.HasKey("Id")
                        .HasName("pk_escucha");

                    b.HasIndex("EntidadFederativaId")
                        .HasDatabaseName("ix_escucha_entidad_federativa_id");

                    b.ToTable("escucha", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.Evento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<bool>("CheckInRequerido")
                        .HasColumnType("boolean")
                        .HasColumnName("check_in_requerido");

                    b.Property<bool>("CupoLimitado")
                        .HasColumnType("boolean")
                        .HasColumnName("cupo_limitado");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccion");

                    b.Property<int>("EventoTipoId")
                        .HasColumnType("integer")
                        .HasColumnName("evento_tipo_id");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_eliminacion");

                    b.Property<DateTime>("FechaEvento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_evento");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<string>("Imagen")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("imagen");

                    b.Property<string>("Latitud")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("latitud");

                    b.Property<string>("Longitud")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("longitud");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<int>("NumeroAsistentes")
                        .HasColumnType("integer")
                        .HasColumnName("numero_asistentes");

                    b.Property<int>("PersonaId")
                        .HasColumnType("integer")
                        .HasColumnName("responsable_id")
                        .HasComment("Persona que creo el evento o es el responsable del mismo");

                    b.Property<int>("Privacidad")
                        .HasColumnType("integer")
                        .HasColumnName("privacidad")
                        .HasComment("1 = Publico, 2 = Lista de invitados, 3 = Privado");

                    b.HasKey("Id")
                        .HasName("pk_evento");

                    b.HasIndex("EventoTipoId")
                        .HasDatabaseName("ix_evento_evento_tipo_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_evento_id");

                    b.HasIndex("PersonaId")
                        .HasDatabaseName("ix_evento_responsable_id");

                    b.ToTable("evento", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.EventoTipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Imagen")
                        .HasColumnType("text")
                        .HasColumnName("imagen");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<bool>("TipoSesion")
                        .HasColumnType("boolean")
                        .HasColumnName("tipo_sesion")
                        .HasComment("True = Sesion, False = Evento");

                    b.HasKey("Id")
                        .HasName("pk_evento_tipo");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_evento_tipo_id");

                    b.ToTable("evento_tipo", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Descripcion = "Este es un evento público.",
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(984),
                            Imagen = "https://i.imgur.com/4ZQZ5Zu.png",
                            Nombre = "Público General",
                            TipoSesion = false
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Descripcion = "Este es un evento para afiliados.",
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(993),
                            Imagen = "https://i.imgur.com/4ZQZ5Zu.png",
                            Nombre = "Afiliados",
                            TipoSesion = false
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Descripcion = "Este es un evento de tipo sesión.",
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(995),
                            Imagen = "https://i.imgur.com/4ZQZ5Zu.png",
                            Nombre = "Sesión",
                            TipoSesion = true
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.Genero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_genero");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_genero_id");

                    b.ToTable("genero", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Nombre = "Masculino"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Nombre = "Femenino"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Nombre = "Chico"
                        },
                        new
                        {
                            Id = 4,
                            Activo = true,
                            Nombre = "Chica"
                        },
                        new
                        {
                            Id = 5,
                            Activo = true,
                            Nombre = "Bigénero"
                        },
                        new
                        {
                            Id = 6,
                            Activo = true,
                            Nombre = "Intersexual"
                        },
                        new
                        {
                            Id = 7,
                            Activo = true,
                            Nombre = "No binario"
                        },
                        new
                        {
                            Id = 8,
                            Activo = true,
                            Nombre = "Sin género"
                        },
                        new
                        {
                            Id = 9,
                            Activo = true,
                            Nombre = "No estoy seguro"
                        },
                        new
                        {
                            Id = 10,
                            Activo = true,
                            Nombre = "Prefiero no decir"
                        },
                        new
                        {
                            Id = 11,
                            Activo = true,
                            Nombre = "Otro"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.GrupoCausa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("UrlImagen")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url_imagen");

                    b.HasKey("Id")
                        .HasName("pk_grupo_causa");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_grupo_causa_id");

                    b.ToTable("grupo_causa", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.GrupoEntidadFederativa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Distrito")
                        .HasColumnType("text")
                        .HasColumnName("distrito");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<string>("Manzana")
                        .HasColumnType("text")
                        .HasColumnName("manzana");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("Seccion")
                        .HasColumnType("text")
                        .HasColumnName("seccion");

                    b.Property<string>("Zona")
                        .HasColumnType("text")
                        .HasColumnName("zona");

                    b.HasKey("Id")
                        .HasName("pk_grupo_entidad_federativa");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_grupo_entidad_federativa_id");

                    b.ToTable("grupo_entidad_federativa", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.GrupoIntereses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("UrlImagen")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url_imagen");

                    b.HasKey("Id")
                        .HasName("pk_grupo_intereses");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_grupo_intereses_id");

                    b.ToTable("grupo_intereses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Nombre = "Economía",
                            UrlImagen = "https://images.unsplash.com/photo-1588591795084-1770cb3be374?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2070&q=80"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Nombre = "Fotografía",
                            UrlImagen = "https://images.unsplash.com/photo-1588591795084-1770cb3be374?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2070&q=80"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Nombre = "Viajes",
                            UrlImagen = "https://images.unsplash.com/photo-1588591795084-1770cb3be374?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2070&q=80"
                        },
                        new
                        {
                            Id = 4,
                            Activo = true,
                            Nombre = "Medio Ambiente",
                            UrlImagen = "https://images.unsplash.com/photo-1588591795084-1770cb3be374?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2070&q=80"
                        },
                        new
                        {
                            Id = 5,
                            Activo = true,
                            Nombre = "Cocina",
                            UrlImagen = "https://images.unsplash.com/photo-1588591795084-1770cb3be374?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2070&q=80"
                        },
                        new
                        {
                            Id = 6,
                            Activo = true,
                            Nombre = "Tecnología",
                            UrlImagen = "https://images.unsplash.com/photo-1588591795084-1770cb3be374?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2070&q=80"
                        },
                        new
                        {
                            Id = 7,
                            Activo = true,
                            Nombre = "Moda",
                            UrlImagen = "https://images.unsplash.com/photo-1588591795084-1770cb3be374?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2070&q=80"
                        },
                        new
                        {
                            Id = 8,
                            Activo = true,
                            Nombre = "Juegos",
                            UrlImagen = "https://images.unsplash.com/photo-1588591795084-1770cb3be374?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2070&q=80"
                        },
                        new
                        {
                            Id = 9,
                            Activo = true,
                            Nombre = "Otros",
                            UrlImagen = "https://images.unsplash.com/photo-1588591795084-1770cb3be374?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2070&q=80"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.Habilidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_habilidad");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_habilidad_id");

                    b.ToTable("habilidad", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Nombre = "Comunicación efectiva"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Nombre = "Creatividad"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Nombre = "Inteligencia emocional"
                        },
                        new
                        {
                            Id = 4,
                            Activo = true,
                            Nombre = "Interpretación de datos"
                        },
                        new
                        {
                            Id = 5,
                            Activo = true,
                            Nombre = "Negociación"
                        },
                        new
                        {
                            Id = 6,
                            Activo = true,
                            Nombre = "Organización"
                        },
                        new
                        {
                            Id = 7,
                            Activo = true,
                            Nombre = "Resiliencia"
                        },
                        new
                        {
                            Id = 8,
                            Activo = true,
                            Nombre = "Resolución de problemas"
                        },
                        new
                        {
                            Id = 9,
                            Activo = true,
                            Nombre = "Toma de decisiones"
                        },
                        new
                        {
                            Id = 10,
                            Activo = true,
                            Nombre = "Trabajo en equipo"
                        },
                        new
                        {
                            Id = 11,
                            Activo = true,
                            Nombre = "Otro"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.HabilidadCustom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<int>("PersonaId")
                        .HasColumnType("integer")
                        .HasColumnName("persona_id");

                    b.HasKey("Id")
                        .HasName("pk_habilidad_custom");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_habilidad_custom_id");

                    b.HasIndex("PersonaId")
                        .HasDatabaseName("ix_habilidad_custom_persona_id");

                    b.ToTable("habilidad_custom", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.Interes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_interes");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_interes_id");

                    b.ToTable("interes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Nombre = "Inversiones"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Nombre = "Acciones"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Nombre = "Emancipación"
                        },
                        new
                        {
                            Id = 4,
                            Activo = true,
                            Nombre = "Criptomonedas"
                        },
                        new
                        {
                            Id = 5,
                            Activo = true,
                            Nombre = "Finanzas"
                        },
                        new
                        {
                            Id = 6,
                            Activo = true,
                            Nombre = "Trading"
                        },
                        new
                        {
                            Id = 7,
                            Activo = true,
                            Nombre = "Fotografía artística"
                        },
                        new
                        {
                            Id = 8,
                            Activo = true,
                            Nombre = "Fotografía conceptual"
                        },
                        new
                        {
                            Id = 9,
                            Activo = true,
                            Nombre = "Fotografía en blanco y negro"
                        },
                        new
                        {
                            Id = 10,
                            Activo = true,
                            Nombre = "Fotografía minimalista"
                        },
                        new
                        {
                            Id = 11,
                            Activo = true,
                            Nombre = "Fotografía abstracta"
                        },
                        new
                        {
                            Id = 12,
                            Activo = true,
                            Nombre = "Fotografía de retrato"
                        },
                        new
                        {
                            Id = 13,
                            Activo = true,
                            Nombre = "Turismo de aventura"
                        },
                        new
                        {
                            Id = 14,
                            Activo = true,
                            Nombre = "Turismo rural"
                        },
                        new
                        {
                            Id = 15,
                            Activo = true,
                            Nombre = "Turismo de naturaleza"
                        },
                        new
                        {
                            Id = 16,
                            Activo = true,
                            Nombre = "Turismo paranormal"
                        },
                        new
                        {
                            Id = 17,
                            Activo = true,
                            Nombre = "Movimientos para cuidado del agua"
                        },
                        new
                        {
                            Id = 18,
                            Activo = true,
                            Nombre = "Concientización de cambio climático"
                        },
                        new
                        {
                            Id = 19,
                            Activo = true,
                            Nombre = "Control de plagas"
                        },
                        new
                        {
                            Id = 20,
                            Activo = true,
                            Nombre = "Solidaridad en desastres naturales"
                        },
                        new
                        {
                            Id = 21,
                            Activo = true,
                            Nombre = "Protección de flora y fauna"
                        },
                        new
                        {
                            Id = 22,
                            Activo = true,
                            Nombre = "Cocina tradicional"
                        },
                        new
                        {
                            Id = 23,
                            Activo = true,
                            Nombre = "Cocina recreativa"
                        },
                        new
                        {
                            Id = 24,
                            Activo = true,
                            Nombre = "Alta cocina"
                        },
                        new
                        {
                            Id = 25,
                            Activo = true,
                            Nombre = "Comida italiana"
                        },
                        new
                        {
                            Id = 26,
                            Activo = true,
                            Nombre = "Comida libanesa"
                        },
                        new
                        {
                            Id = 27,
                            Activo = true,
                            Nombre = "Comida japonesa"
                        },
                        new
                        {
                            Id = 28,
                            Activo = true,
                            Nombre = "Comida peruana"
                        },
                        new
                        {
                            Id = 29,
                            Activo = true,
                            Nombre = "Comida mexicana"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.InteresGrupoIntereses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GrupoInteresesId")
                        .HasColumnType("integer")
                        .HasColumnName("grupo_intereses_id");

                    b.Property<int>("InteresId")
                        .HasColumnType("integer")
                        .HasColumnName("interes_id");

                    b.HasKey("Id")
                        .HasName("pk_interes_grupo_intereses");

                    b.HasIndex("GrupoInteresesId")
                        .HasDatabaseName("ix_interes_grupo_intereses_grupo_intereses_id");

                    b.HasIndex("InteresId")
                        .HasDatabaseName("ix_interes_grupo_intereses_interes_id");

                    b.ToTable("interes_grupo_intereses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GrupoInteresesId = 1,
                            InteresId = 1
                        },
                        new
                        {
                            Id = 2,
                            GrupoInteresesId = 1,
                            InteresId = 2
                        },
                        new
                        {
                            Id = 3,
                            GrupoInteresesId = 1,
                            InteresId = 3
                        },
                        new
                        {
                            Id = 4,
                            GrupoInteresesId = 1,
                            InteresId = 4
                        },
                        new
                        {
                            Id = 5,
                            GrupoInteresesId = 1,
                            InteresId = 5
                        },
                        new
                        {
                            Id = 6,
                            GrupoInteresesId = 1,
                            InteresId = 6
                        },
                        new
                        {
                            Id = 7,
                            GrupoInteresesId = 2,
                            InteresId = 7
                        },
                        new
                        {
                            Id = 8,
                            GrupoInteresesId = 2,
                            InteresId = 8
                        },
                        new
                        {
                            Id = 9,
                            GrupoInteresesId = 2,
                            InteresId = 9
                        },
                        new
                        {
                            Id = 10,
                            GrupoInteresesId = 2,
                            InteresId = 10
                        },
                        new
                        {
                            Id = 11,
                            GrupoInteresesId = 2,
                            InteresId = 11
                        },
                        new
                        {
                            Id = 12,
                            GrupoInteresesId = 2,
                            InteresId = 12
                        },
                        new
                        {
                            Id = 13,
                            GrupoInteresesId = 3,
                            InteresId = 13
                        },
                        new
                        {
                            Id = 14,
                            GrupoInteresesId = 3,
                            InteresId = 14
                        },
                        new
                        {
                            Id = 15,
                            GrupoInteresesId = 3,
                            InteresId = 15
                        },
                        new
                        {
                            Id = 16,
                            GrupoInteresesId = 3,
                            InteresId = 16
                        },
                        new
                        {
                            Id = 17,
                            GrupoInteresesId = 4,
                            InteresId = 17
                        },
                        new
                        {
                            Id = 18,
                            GrupoInteresesId = 4,
                            InteresId = 18
                        },
                        new
                        {
                            Id = 19,
                            GrupoInteresesId = 4,
                            InteresId = 19
                        },
                        new
                        {
                            Id = 20,
                            GrupoInteresesId = 4,
                            InteresId = 20
                        },
                        new
                        {
                            Id = 21,
                            GrupoInteresesId = 4,
                            InteresId = 21
                        },
                        new
                        {
                            Id = 22,
                            GrupoInteresesId = 5,
                            InteresId = 22
                        },
                        new
                        {
                            Id = 23,
                            GrupoInteresesId = 5,
                            InteresId = 23
                        },
                        new
                        {
                            Id = 24,
                            GrupoInteresesId = 5,
                            InteresId = 24
                        },
                        new
                        {
                            Id = 25,
                            GrupoInteresesId = 5,
                            InteresId = 25
                        },
                        new
                        {
                            Id = 26,
                            GrupoInteresesId = 5,
                            InteresId = 26
                        },
                        new
                        {
                            Id = 27,
                            GrupoInteresesId = 5,
                            InteresId = 27
                        },
                        new
                        {
                            Id = 28,
                            GrupoInteresesId = 5,
                            InteresId = 28
                        },
                        new
                        {
                            Id = 29,
                            GrupoInteresesId = 5,
                            InteresId = 29
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.Invitado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("ApellidoMaterno")
                        .HasColumnType("text")
                        .HasColumnName("apellido_materno");

                    b.Property<string>("ApellidoPaterno")
                        .HasColumnType("text")
                        .HasColumnName("apellido_paterno");

                    b.Property<string>("CargoOrganizacion")
                        .HasColumnType("text")
                        .HasColumnName("cargo_organizacion")
                        .HasComment("El cargo u organización a la que pertenece el invitado");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("EntidadFederativa")
                        .HasColumnType("text")
                        .HasColumnName("entidad_federativa");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_nacimiento");

                    b.Property<string>("ModoParticipacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("modo_participacion")
                        .HasComment("Puede ser: 'Presencial', 'Virtual' o 'Ambos'");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("Sexo")
                        .HasColumnType("text")
                        .HasColumnName("sexo");

                    b.Property<string>("Telefono")
                        .HasColumnType("text")
                        .HasColumnName("telefono");

                    b.HasKey("Id")
                        .HasName("pk_invitado");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_invitado_id");

                    b.ToTable("invitado", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.Motivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_motivo");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_motivo_id");

                    b.ToTable("motivo", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Nombre = "Voluntario"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Nombre = "Servicio Social"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Nombre = "Prácticas Profesionales"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.MotivoBaja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_motivo_baja");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_motivo_baja_id");

                    b.ToTable("motivo_baja", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.Perfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<bool>("esPublico")
                        .HasColumnType("boolean")
                        .HasColumnName("es_publico");

                    b.HasKey("Id")
                        .HasName("pk_perfil");

                    b.ToTable("perfil", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.PerfilCatalogoRedesSociales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<int>("CatalogoRedesSocialesId")
                        .HasColumnType("integer")
                        .HasColumnName("catalogo_redes_sociales_id");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<int>("PerfilId")
                        .HasColumnType("integer")
                        .HasColumnName("perfil_id");

                    b.HasKey("Id")
                        .HasName("pk_perfil_catalogo_redes_sociales");

                    b.HasIndex("CatalogoRedesSocialesId")
                        .HasDatabaseName("ix_perfil_catalogo_redes_sociales_catalogo_redes_sociales_id");

                    b.HasIndex("PerfilId")
                        .HasDatabaseName("ix_perfil_catalogo_redes_sociales_perfil_id");

                    b.ToTable("perfil_catalogo_redes_sociales", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.PerfilSiguePerfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<int>("PerfilSeguidoId")
                        .HasColumnType("integer")
                        .HasColumnName("perfil_seguido_id");

                    b.Property<int>("PerfilSeguidorId")
                        .HasColumnType("integer")
                        .HasColumnName("perfil_seguidor_id");

                    b.HasKey("Id")
                        .HasName("pk_perfil_sigue_perfil");

                    b.HasIndex("PerfilSeguidoId")
                        .HasDatabaseName("ix_perfil_sigue_perfil_perfil_seguido_id");

                    b.HasIndex("PerfilSeguidorId")
                        .HasDatabaseName("ix_perfil_sigue_perfil_perfil_seguidor_id");

                    b.ToTable("perfil_sigue_perfil", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApellidoMaterno")
                        .HasColumnType("text")
                        .HasColumnName("apellido_materno");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("apellido_paterno");

                    b.Property<string>("Curp")
                        .HasColumnType("text")
                        .HasColumnName("curp");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_nacimiento");

                    b.Property<string>("FirmaElectronica")
                        .HasColumnType("text")
                        .HasColumnName("firma_electronica");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_persona");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_persona_id");

                    b.ToTable("persona", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApellidoMaterno = "Coeto",
                            ApellidoPaterno = "Gomez",
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1184),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1184),
                            FechaNacimiento = new DateTime(1994, 7, 24, 22, 0, 0, 0, DateTimeKind.Utc),
                            Nombre = "Jose Alfonso"
                        },
                        new
                        {
                            Id = 2,
                            ApellidoPaterno = "Naranja",
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1632),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 60, DateTimeKind.Utc).AddTicks(1632),
                            FechaNacimiento = new DateTime(2000, 1, 1, 22, 0, 0, 0, DateTimeKind.Utc),
                            Nombre = "Admin"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.PersonaCausa", b =>
                {
                    b.Property<int>("PersonaId")
                        .HasColumnType("integer")
                        .HasColumnName("persona_id");

                    b.Property<int>("CausaId")
                        .HasColumnType("integer")
                        .HasColumnName("causa_id");

                    b.HasKey("PersonaId", "CausaId")
                        .HasName("pk_persona_causa");

                    b.ToTable("persona_causa", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.PersonaCodigoInvitacion", b =>
                {
                    b.Property<int>("CodigoInvitacionId")
                        .HasColumnType("integer")
                        .HasColumnName("codigo_invitacion_id");

                    b.Property<int>("PersonaId")
                        .HasColumnType("integer")
                        .HasColumnName("persona_id");

                    b.Property<DateTime?>("FechaAceptado")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_aceptado");

                    b.HasKey("CodigoInvitacionId", "PersonaId")
                        .HasName("pk_persona_codigo_invitacion");

                    b.ToTable("persona_codigo_invitacion", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.PersonaEscolaridad", b =>
                {
                    b.Property<int>("PersonaId")
                        .HasColumnType("integer")
                        .HasColumnName("persona_id");

                    b.Property<int>("EscolaridadId")
                        .HasColumnType("integer")
                        .HasColumnName("escolaridad_id");

                    b.HasKey("PersonaId", "EscolaridadId")
                        .HasName("pk_persona_escolaridad");

                    b.ToTable("persona_escolaridad", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.PersonaGenero", b =>
                {
                    b.Property<int>("PersonaId")
                        .HasColumnType("integer")
                        .HasColumnName("persona_id");

                    b.Property<int>("GeneroId")
                        .HasColumnType("integer")
                        .HasColumnName("genero_id");

                    b.HasKey("PersonaId", "GeneroId")
                        .HasName("pk_persona_genero");

                    b.ToTable("persona_genero", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.PersonaHabilidad", b =>
                {
                    b.Property<int>("PersonaId")
                        .HasColumnType("integer")
                        .HasColumnName("persona_id");

                    b.Property<int>("HabilidadId")
                        .HasColumnType("integer")
                        .HasColumnName("habilidad_id");

                    b.HasKey("PersonaId", "HabilidadId")
                        .HasName("pk_persona_habilidad");

                    b.ToTable("persona_habilidad", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.PersonaInteres", b =>
                {
                    b.Property<int>("PersonaId")
                        .HasColumnType("integer")
                        .HasColumnName("persona_id");

                    b.Property<int>("InteresId")
                        .HasColumnType("integer")
                        .HasColumnName("interes_id");

                    b.HasKey("PersonaId", "InteresId")
                        .HasName("pk_persona_interes");

                    b.ToTable("persona_interes", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.PersonaMotivo", b =>
                {
                    b.Property<int>("PersonaId")
                        .HasColumnType("integer")
                        .HasColumnName("persona_id");

                    b.Property<int>("MotivoId")
                        .HasColumnType("integer")
                        .HasColumnName("motivo_id");

                    b.HasKey("PersonaId", "MotivoId")
                        .HasName("pk_persona_motivo");

                    b.ToTable("persona_motivo", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.Programa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<int>("CantidadCupo")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad_cupo");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_fin");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_inicio");

                    b.Property<string>("Localidad")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("localidad");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_programa");

                    b.ToTable("programa", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.ProgramaArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("integer")
                        .HasColumnName("area_id");

                    b.Property<int>("ProgramaId")
                        .HasColumnType("integer")
                        .HasColumnName("programa_id");

                    b.HasKey("Id")
                        .HasName("pk_programa_area");

                    b.HasIndex("AreaId")
                        .HasDatabaseName("ix_programa_area_area_id");

                    b.HasIndex("ProgramaId")
                        .HasDatabaseName("ix_programa_area_programa_id");

                    b.ToTable("programa_area", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.ProgramaResponsable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProgramaId")
                        .HasColumnType("integer")
                        .HasColumnName("programa_id");

                    b.Property<int>("ResponsableId")
                        .HasColumnType("integer")
                        .HasColumnName("responsable_id");

                    b.HasKey("Id")
                        .HasName("pk_programa_responsable");

                    b.HasIndex("ProgramaId")
                        .HasDatabaseName("ix_programa_responsable_programa_id");

                    b.ToTable("programa_responsable", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.Publicacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<int?>("CatalogoPublicacionId")
                        .HasColumnType("integer")
                        .HasColumnName("catalogo_publicacion_id");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contenido");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_fin");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_inicio");

                    b.Property<string>("ImagenPublicacion")
                        .HasColumnType("text")
                        .HasColumnName("imagen_publicacion");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("titulo");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id")
                        .HasName("pk_publicacion");

                    b.HasIndex("CatalogoPublicacionId")
                        .HasDatabaseName("ix_publicacion_catalogo_publicacion_id");

                    b.ToTable("publicacion", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.PublicacionArchivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArchivoId")
                        .HasColumnType("integer")
                        .HasColumnName("archivo_id");

                    b.Property<int>("PublicacionId")
                        .HasColumnType("integer")
                        .HasColumnName("publicacion_id");

                    b.HasKey("Id")
                        .HasName("pk_publicacion_archivo");

                    b.HasIndex("ArchivoId")
                        .HasDatabaseName("ix_publicacion_archivo_archivo_id");

                    b.HasIndex("PublicacionId")
                        .HasDatabaseName("ix_publicacion_archivo_publicacion_id");

                    b.ToTable("publicacion_archivo", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.RegistroCausa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApellidoMaterno")
                        .HasColumnType("text")
                        .HasColumnName("apellido_materno");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("apellido_paterno");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccion");

                    b.Property<int>("EntidadFederativaId")
                        .HasColumnType("integer")
                        .HasColumnName("entidad_federativa_id");

                    b.Property<int>("EscolaridadId")
                        .HasColumnType("integer")
                        .HasColumnName("escolaridad_id");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_nacimiento");

                    b.Property<int>("GeneroId")
                        .HasColumnType("integer")
                        .HasColumnName("genero_id");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_registro_causa");

                    b.HasIndex("EntidadFederativaId")
                        .HasDatabaseName("ix_registro_causa_entidad_federativa_id");

                    b.HasIndex("EscolaridadId")
                        .HasDatabaseName("ix_registro_causa_escolaridad_id");

                    b.HasIndex("GeneroId")
                        .HasDatabaseName("ix_registro_causa_genero_id");

                    b.ToTable("registro_causa", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.RegistroCausaCausa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CausaId")
                        .HasColumnType("integer")
                        .HasColumnName("causa_id");

                    b.Property<int>("RegistroCausaId")
                        .HasColumnType("integer")
                        .HasColumnName("registro_causa_id");

                    b.HasKey("Id")
                        .HasName("pk_registro_causa_causa");

                    b.HasIndex("CausaId")
                        .HasDatabaseName("ix_registro_causa_causa_causa_id");

                    b.HasIndex("RegistroCausaId")
                        .HasDatabaseName("ix_registro_causa_causa_registro_causa_id");

                    b.ToTable("registro_causa_causa", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.RegistroOchoAcciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApellidoMaterno")
                        .HasColumnType("text")
                        .HasColumnName("apellido_materno");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("apellido_paterno");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccion");

                    b.Property<int>("EntidadFederativaId")
                        .HasColumnType("integer")
                        .HasColumnName("entidad_federativa_id");

                    b.Property<int?>("EscolaridadId")
                        .HasColumnType("integer")
                        .HasColumnName("escolaridad_id");

                    b.Property<int?>("EstatusRegistroId")
                        .HasColumnType("integer")
                        .HasColumnName("estatus_registro_id");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_nacimiento");

                    b.Property<int>("GeneroId")
                        .HasColumnType("integer")
                        .HasColumnName("genero_id");

                    b.Property<int?>("MotivoId")
                        .HasColumnType("integer")
                        .HasColumnName("motivo_id");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_registro_ocho_acciones");

                    b.HasIndex("EntidadFederativaId")
                        .HasDatabaseName("ix_registro_ocho_acciones_entidad_federativa_id");

                    b.HasIndex("EscolaridadId")
                        .HasDatabaseName("ix_registro_ocho_acciones_escolaridad_id");

                    b.HasIndex("EstatusRegistroId")
                        .HasDatabaseName("ix_registro_ocho_acciones_estatus_registro_id");

                    b.HasIndex("GeneroId")
                        .HasDatabaseName("ix_registro_ocho_acciones_genero_id");

                    b.HasIndex("MotivoId")
                        .HasDatabaseName("ix_registro_ocho_acciones_motivo_id");

                    b.ToTable("registro_ocho_acciones", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.RegistroOchoAccionesCatalogoOchoAcciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CatalogoOchoAccionesId")
                        .HasColumnType("integer")
                        .HasColumnName("catalogo_ocho_acciones_id");

                    b.Property<int>("RegistroOchoAccionesId")
                        .HasColumnType("integer")
                        .HasColumnName("registro_ocho_acciones_id");

                    b.HasKey("Id")
                        .HasName("pk_registro_ocho_acciones_catalogo_ocho_acciones");

                    b.HasIndex("CatalogoOchoAccionesId")
                        .HasDatabaseName("ix_registro_ocho_acciones_catalogo_ocho_acciones_catalogo_ocho");

                    b.HasIndex("RegistroOchoAccionesId")
                        .HasDatabaseName("ix_registro_ocho_acciones_catalogo_ocho_acciones_registro_ocho");

                    b.ToTable("registro_ocho_acciones_catalogo_ocho_acciones", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.RegistroOchoAccionesHabilidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HabilidadId")
                        .HasColumnType("integer")
                        .HasColumnName("habilidad_id");

                    b.Property<int>("RegistroOchoAccionesId")
                        .HasColumnType("integer")
                        .HasColumnName("registro_ocho_acciones_id");

                    b.HasKey("Id")
                        .HasName("pk_registro_ocho_acciones_habilidad");

                    b.HasIndex("HabilidadId")
                        .HasDatabaseName("ix_registro_ocho_acciones_habilidad_habilidad_id");

                    b.HasIndex("RegistroOchoAccionesId")
                        .HasDatabaseName("ix_registro_ocho_acciones_habilidad_registro_ocho_acciones_id");

                    b.ToTable("registro_ocho_acciones_habilidad", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.RegistroOchoAccionesInteres", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InteresId")
                        .HasColumnType("integer")
                        .HasColumnName("interes_id");

                    b.Property<int>("RegistroOchoAccionesId")
                        .HasColumnType("integer")
                        .HasColumnName("registro_ocho_acciones_id");

                    b.HasKey("Id")
                        .HasName("pk_registro_ocho_acciones_interes");

                    b.HasIndex("InteresId")
                        .HasDatabaseName("ix_registro_ocho_acciones_interes_interes_id");

                    b.HasIndex("RegistroOchoAccionesId")
                        .HasDatabaseName("ix_registro_ocho_acciones_interes_registro_ocho_acciones_id");

                    b.ToTable("registro_ocho_acciones_interes", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.RegistroOchoAccionesUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id")
                        .HasName("pk_registro_ocho_acciones_usuario");

                    b.ToTable("registro_ocho_acciones_usuario", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.RegistroOchoAccionesUsuarioCatalogoOchoAcciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CatalogoOchoAccionesId")
                        .HasColumnType("integer")
                        .HasColumnName("catalogo_ocho_acciones_id");

                    b.Property<int>("RegistroOchoAccionesUsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("registro_ocho_acciones_usuario_id");

                    b.HasKey("Id")
                        .HasName("pk_registro_ocho_acciones_usuario_catalogo_ocho_acciones");

                    b.HasIndex("CatalogoOchoAccionesId")
                        .HasDatabaseName("ix_registro_ocho_acciones_usuario_catalogo_ocho_acciones_catal");

                    b.HasIndex("RegistroOchoAccionesUsuarioId")
                        .HasDatabaseName("ix_registro_ocho_acciones_usuario_catalogo_ocho_acciones_regis");

                    b.ToTable("registro_ocho_acciones_usuario_catalogo_ocho_acciones", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.RespuestasEncuesta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EncuestaId")
                        .HasColumnType("integer")
                        .HasColumnName("encuesta_id");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<int>("PreguntaId")
                        .HasColumnType("integer")
                        .HasColumnName("pregunta_id");

                    b.Property<string>("Respuesta")
                        .HasColumnType("text")
                        .HasColumnName("respuesta");

                    b.HasKey("Id")
                        .HasName("pk_respuestas_encuesta");

                    b.HasIndex("EncuestaId")
                        .HasDatabaseName("ix_respuestas_encuesta_encuesta_id");

                    b.HasIndex("PreguntaId")
                        .HasDatabaseName("ix_respuestas_encuesta_pregunta_id");

                    b.ToTable("respuestas_encuesta", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.RespuestasOchoAcciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<int>("PreguntaId")
                        .HasColumnType("integer")
                        .HasColumnName("pregunta_id");

                    b.Property<int>("RegistroOchoAccionesId")
                        .HasColumnType("integer")
                        .HasColumnName("registro_ocho_acciones_id");

                    b.Property<string>("Respuesta")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("respuesta");

                    b.HasKey("Id")
                        .HasName("pk_respuestas_ocho_acciones");

                    b.HasIndex("PreguntaId")
                        .HasDatabaseName("ix_respuestas_ocho_acciones_pregunta_id");

                    b.HasIndex("RegistroOchoAccionesId")
                        .HasDatabaseName("ix_respuestas_ocho_acciones_registro_ocho_acciones_id");

                    b.ToTable("respuestas_ocho_acciones", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.RespuestasOchoAccionesRegistroOchoAccionesUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<int>("PreguntaId")
                        .HasColumnType("integer")
                        .HasColumnName("pregunta_id");

                    b.Property<int>("RegistroOchoAccionesUsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("registro_ocho_acciones_usuario_id");

                    b.Property<string>("Respuesta")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("respuesta");

                    b.HasKey("Id")
                        .HasName("pk_respuestas_ocho_acciones_registro_ocho_acciones_usuario");

                    b.HasIndex("PreguntaId")
                        .HasDatabaseName("ix_respuestas_ocho_acciones_registro_ocho_acciones_usuario_pre");

                    b.HasIndex("RegistroOchoAccionesUsuarioId")
                        .HasDatabaseName("ix_respuestas_ocho_acciones_registro_ocho_acciones_usuario_reg");

                    b.ToTable("respuestas_ocho_acciones_registro_ocho_acciones_usuario", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.TipoContacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<bool>("EsEmail")
                        .HasColumnType("boolean")
                        .HasColumnName("es_email");

                    b.Property<bool>("EsOtro")
                        .HasColumnType("boolean")
                        .HasColumnName("es_otro");

                    b.Property<bool>("EsTelefono")
                        .HasColumnType("boolean")
                        .HasColumnName("es_telefono");

                    b.Property<bool>("EsWhatsapp")
                        .HasColumnType("boolean")
                        .HasColumnName("es_whatsapp")
                        .HasComment("Si es un telefono, se define si este tiene whatsapp o no");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_tipo_contacto");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_tipo_contacto_id");

                    b.ToTable("tipo_contacto", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            EsEmail = true,
                            EsOtro = true,
                            EsTelefono = false,
                            EsWhatsapp = false,
                            Nombre = "Correo electrónico"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            EsEmail = false,
                            EsOtro = true,
                            EsTelefono = true,
                            EsWhatsapp = false,
                            Nombre = "Teléfono"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            EsEmail = false,
                            EsOtro = true,
                            EsTelefono = true,
                            EsWhatsapp = true,
                            Nombre = "WhatsApp"
                        },
                        new
                        {
                            Id = 4,
                            Activo = true,
                            EsEmail = false,
                            EsOtro = true,
                            EsTelefono = false,
                            EsWhatsapp = false,
                            Nombre = "Otro"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Rol")
                        .HasColumnType("text")
                        .HasColumnName("rol");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_usuario");

                    b.ToTable("usuario", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "alfonso.coeto@guacamayotech.com",
                            FechaCreacion = new DateTime(2023, 6, 12, 2, 6, 23, 59, DateTimeKind.Utc).AddTicks(9568),
                            FechaModificacion = new DateTime(2023, 6, 12, 2, 6, 23, 59, DateTimeKind.Utc).AddTicks(9572),
                            Password = "c12fd9d663f595285f8ebffcb3c9b3144cd6d96f2c3acfa8293162fb701c871739378aa6ab073590d99057ec2a34eec3dd2c30899cce81501bea1837a916c997",
                            Rol = "Super Administrador",
                            UserName = "poncho.admin"
                        });
                });

            modelBuilder.Entity("MC_Universo_API.Models.UsuarioPerfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<int>("PerfilId")
                        .HasColumnType("integer")
                        .HasColumnName("perfil_id");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id")
                        .HasName("pk_usuario_perfil");

                    b.HasIndex("PerfilId")
                        .HasDatabaseName("ix_usuario_perfil_perfil_id");

                    b.ToTable("usuario_perfil", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.Voluntario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApellidoMaterno")
                        .HasColumnType("text")
                        .HasColumnName("apellido_materno");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("apellido_paterno");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("direccion");

                    b.Property<int>("EntidadFederativaId")
                        .HasColumnType("integer")
                        .HasColumnName("entidad_federativa_id");

                    b.Property<int>("EscolaridadId")
                        .HasColumnType("integer")
                        .HasColumnName("escolaridad_id");

                    b.Property<int>("EstatusVoluntarioId")
                        .HasColumnType("integer")
                        .HasColumnName("estatus_voluntario_id");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_nacimiento");

                    b.Property<int>("GeneroId")
                        .HasColumnType("integer")
                        .HasColumnName("genero_id");

                    b.Property<int>("MotivoId")
                        .HasColumnType("integer")
                        .HasColumnName("motivo_id");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_voluntario");

                    b.HasIndex("EntidadFederativaId")
                        .HasDatabaseName("ix_voluntario_entidad_federativa_id");

                    b.HasIndex("EscolaridadId")
                        .HasDatabaseName("ix_voluntario_escolaridad_id");

                    b.HasIndex("EstatusVoluntarioId")
                        .HasDatabaseName("ix_voluntario_estatus_voluntario_id");

                    b.HasIndex("GeneroId")
                        .HasDatabaseName("ix_voluntario_genero_id");

                    b.HasIndex("MotivoId")
                        .HasDatabaseName("ix_voluntario_motivo_id");

                    b.ToTable("voluntario", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.VoluntarioComentario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comentario");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.Property<int>("VoluntarioId")
                        .HasColumnType("integer")
                        .HasColumnName("voluntario_id");

                    b.HasKey("Id")
                        .HasName("pk_voluntario_comentario");

                    b.HasIndex("VoluntarioId")
                        .HasDatabaseName("ix_voluntario_comentario_voluntario_id");

                    b.ToTable("voluntario_comentario", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.VoluntarioHabilidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HabilidadId")
                        .HasColumnType("integer")
                        .HasColumnName("habilidad_id");

                    b.Property<int>("VoluntarioId")
                        .HasColumnType("integer")
                        .HasColumnName("voluntario_id");

                    b.HasKey("Id")
                        .HasName("pk_voluntario_habilidad");

                    b.HasIndex("HabilidadId")
                        .HasDatabaseName("ix_voluntario_habilidad_habilidad_id");

                    b.HasIndex("VoluntarioId")
                        .HasDatabaseName("ix_voluntario_habilidad_voluntario_id");

                    b.ToTable("voluntario_habilidad", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.VoluntarioInteres", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InteresId")
                        .HasColumnType("integer")
                        .HasColumnName("interes_id");

                    b.Property<int>("VoluntarioId")
                        .HasColumnType("integer")
                        .HasColumnName("voluntario_id");

                    b.HasKey("Id")
                        .HasName("pk_voluntario_interes");

                    b.HasIndex("InteresId")
                        .HasDatabaseName("ix_voluntario_interes_interes_id");

                    b.HasIndex("VoluntarioId")
                        .HasDatabaseName("ix_voluntario_interes_voluntario_id");

                    b.ToTable("voluntario_interes", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.VoluntarioPrograma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Activo")
                        .HasColumnType("boolean")
                        .HasColumnName("activo");

                    b.Property<int>("ProgramaId")
                        .HasColumnType("integer")
                        .HasColumnName("programa_id");

                    b.Property<int>("VoluntarioId")
                        .HasColumnType("integer")
                        .HasColumnName("voluntario_id");

                    b.HasKey("Id")
                        .HasName("pk_voluntario_programa");

                    b.HasIndex("ProgramaId")
                        .HasDatabaseName("ix_voluntario_programa_programa_id");

                    b.HasIndex("VoluntarioId")
                        .HasDatabaseName("ix_voluntario_programa_voluntario_id");

                    b.ToTable("voluntario_programa", (string)null);
                });

            modelBuilder.Entity("MC_Universo_API.Models.BajasSistema", b =>
                {
                    b.HasOne("MC_Universo_API.Models.MotivoBaja", "MotivoBaja")
                        .WithMany()
                        .HasForeignKey("MotivoBajaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bajas_sistema_motivo_baja_motivo_baja_id");

                    b.HasOne("MC_Universo_API.Models.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bajas_sistema_persona_persona_id");

                    b.Navigation("MotivoBaja");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("MC_Universo_API.Models.CatalogoPreguntasEncuestas", b =>
                {
                    b.HasOne("MC_Universo_API.Models.CatalogoCategoriasPreguntasEncuestas", "CatalogoCategoriasPreguntasEncuestas")
                        .WithMany()
                        .HasForeignKey("CategoriaPreguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_catalogo_preguntas_encuestas_catalogo_categorias_preguntas_");

                    b.Navigation("CatalogoCategoriasPreguntasEncuestas");
                });

            modelBuilder.Entity("MC_Universo_API.Models.CodigoInvitacion", b =>
                {
                    b.HasOne("MC_Universo_API.Models.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_codigo_invitacion_persona_sponsor_id");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("MC_Universo_API.Models.DatoContacto", b =>
                {
                    b.HasOne("MC_Universo_API.Models.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dato_contacto_persona_persona_id");

                    b.HasOne("MC_Universo_API.Models.TipoContacto", "TipoContacto")
                        .WithMany()
                        .HasForeignKey("TipoContactoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dato_contacto_tipo_contacto_tipo_contacto_id");

                    b.Navigation("Persona");

                    b.Navigation("TipoContacto");
                });

            modelBuilder.Entity("MC_Universo_API.Models.Direccion", b =>
                {
                    b.HasOne("MC_Universo_API.Models.EntidadFederativa", "EntidadFederativa")
                        .WithMany()
                        .HasForeignKey("EntidadFederativaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_direccion_entidad_federativa_entidad_federativa_id");

                    b.HasOne("MC_Universo_API.Models.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_direccion_persona_persona_id");

                    b.Navigation("EntidadFederativa");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("MC_Universo_API.Models.EntidadFederativaGrupoEntidadFederativa", b =>
                {
                    b.HasOne("MC_Universo_API.Models.EntidadFederativa", "EntidadFederativa")
                        .WithMany()
                        .HasForeignKey("EntidadFederativaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_entidad_federativa_grupo_entidad_federativa_entidad_federat");

                    b.HasOne("MC_Universo_API.Models.GrupoEntidadFederativa", "GrupoEntidadFederativa")
                        .WithMany()
                        .HasForeignKey("GrupoEntidadFederativaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_entidad_federativa_grupo_entidad_federativa_grupo_entidad_f");

                    b.Navigation("EntidadFederativa");

                    b.Navigation("GrupoEntidadFederativa");
                });

            modelBuilder.Entity("MC_Universo_API.Models.Escucha", b =>
                {
                    b.HasOne("MC_Universo_API.Models.EntidadFederativa", "EntidadFederativa")
                        .WithMany()
                        .HasForeignKey("EntidadFederativaId")
                        .HasConstraintName("fk_escucha_entidad_federativa_entidad_federativa_id");

                    b.Navigation("EntidadFederativa");
                });

            modelBuilder.Entity("MC_Universo_API.Models.Evento", b =>
                {
                    b.HasOne("MC_Universo_API.Models.EventoTipo", "EventoTipo")
                        .WithMany()
                        .HasForeignKey("EventoTipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_evento_evento_tipo_evento_tipo_id");

                    b.HasOne("MC_Universo_API.Models.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_evento_persona_responsable_id");

                    b.Navigation("EventoTipo");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("MC_Universo_API.Models.HabilidadCustom", b =>
                {
                    b.HasOne("MC_Universo_API.Models.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_habilidad_custom_persona_persona_id");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("MC_Universo_API.Models.InteresGrupoIntereses", b =>
                {
                    b.HasOne("MC_Universo_API.Models.GrupoIntereses", "GrupoIntereses")
                        .WithMany()
                        .HasForeignKey("GrupoInteresesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_interes_grupo_intereses_grupo_intereses_grupo_intereses_id");

                    b.HasOne("MC_Universo_API.Models.Interes", "Interes")
                        .WithMany()
                        .HasForeignKey("InteresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_interes_grupo_intereses_interes_interes_id");

                    b.Navigation("GrupoIntereses");

                    b.Navigation("Interes");
                });

            modelBuilder.Entity("MC_Universo_API.Models.PerfilCatalogoRedesSociales", b =>
                {
                    b.HasOne("MC_Universo_API.Models.CatalogoRedesSociales", "CatalogoRedesSociales")
                        .WithMany()
                        .HasForeignKey("CatalogoRedesSocialesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_perfil_catalogo_redes_sociales_catalogo_redes_sociales_cata");

                    b.HasOne("MC_Universo_API.Models.Perfil", "Perfil")
                        .WithMany()
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_perfil_catalogo_redes_sociales_perfil_perfil_id");

                    b.Navigation("CatalogoRedesSociales");

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("MC_Universo_API.Models.PerfilSiguePerfil", b =>
                {
                    b.HasOne("MC_Universo_API.Models.Perfil", "PerfilSeguido")
                        .WithMany()
                        .HasForeignKey("PerfilSeguidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_perfil_sigue_perfil_perfil_perfil_seguido_id");

                    b.HasOne("MC_Universo_API.Models.Perfil", "PerfilSeguidor")
                        .WithMany()
                        .HasForeignKey("PerfilSeguidorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_perfil_sigue_perfil_perfil_perfil_seguidor_id");

                    b.Navigation("PerfilSeguido");

                    b.Navigation("PerfilSeguidor");
                });

            modelBuilder.Entity("MC_Universo_API.Models.ProgramaArea", b =>
                {
                    b.HasOne("MC_Universo_API.Models.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_programa_area_area_area_id");

                    b.HasOne("MC_Universo_API.Models.Programa", "Programa")
                        .WithMany()
                        .HasForeignKey("ProgramaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_programa_area_programa_programa_id");

                    b.Navigation("Area");

                    b.Navigation("Programa");
                });

            modelBuilder.Entity("MC_Universo_API.Models.ProgramaResponsable", b =>
                {
                    b.HasOne("MC_Universo_API.Models.Programa", "Programa")
                        .WithMany()
                        .HasForeignKey("ProgramaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_programa_responsable_programa_programa_id");

                    b.Navigation("Programa");
                });

            modelBuilder.Entity("MC_Universo_API.Models.Publicacion", b =>
                {
                    b.HasOne("MC_Universo_API.Models.CatalogoPublicaciones", "CatalogoPublicaciones")
                        .WithMany()
                        .HasForeignKey("CatalogoPublicacionId")
                        .HasConstraintName("fk_publicacion_catalogo_publicaciones_catalogo_publicacion_id");

                    b.Navigation("CatalogoPublicaciones");
                });

            modelBuilder.Entity("MC_Universo_API.Models.PublicacionArchivo", b =>
                {
                    b.HasOne("MC_Universo_API.Models.Archivo", "Archivo")
                        .WithMany()
                        .HasForeignKey("ArchivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_publicacion_archivo_archivo_archivo_id");

                    b.HasOne("MC_Universo_API.Models.Publicacion", "Publicacion")
                        .WithMany()
                        .HasForeignKey("PublicacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_publicacion_archivo_publicacion_publicacion_id");

                    b.Navigation("Archivo");

                    b.Navigation("Publicacion");
                });

            modelBuilder.Entity("MC_Universo_API.Models.RegistroCausa", b =>
                {
                    b.HasOne("MC_Universo_API.Models.EntidadFederativa", "EntidadFederativa")
                        .WithMany()
                        .HasForeignKey("EntidadFederativaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_registro_causa_entidad_federativa_entidad_federativa_id");

                    b.HasOne("MC_Universo_API.Models.Escolaridad", "Escolaridad")
                        .WithMany()
                        .HasForeignKey("EscolaridadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_registro_causa_escolaridad_escolaridad_id");

                    b.HasOne("MC_Universo_API.Models.Genero", "Genero")
                        .WithMany()
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_registro_causa_genero_genero_id");

                    b.Navigation("EntidadFederativa");

                    b.Navigation("Escolaridad");

                    b.Navigation("Genero");
                });

            modelBuilder.Entity("MC_Universo_API.Models.RegistroCausaCausa", b =>
                {
                    b.HasOne("MC_Universo_API.Models.Causa", "Causa")
                        .WithMany()
                        .HasForeignKey("CausaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_registro_causa_causa_causa_causa_id");

                    b.HasOne("MC_Universo_API.Models.RegistroCausa", "RegistroCausa")
                        .WithMany()
                        .HasForeignKey("RegistroCausaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_registro_causa_causa_registro_causa_registro_causa_id");

                    b.Navigation("Causa");

                    b.Navigation("RegistroCausa");
                });

            modelBuilder.Entity("MC_Universo_API.Models.RegistroOchoAcciones", b =>
                {
                    b.HasOne("MC_Universo_API.Models.EntidadFederativa", "EntidadFederativa")
                        .WithMany()
                        .HasForeignKey("EntidadFederativaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_registro_ocho_acciones_entidad_federativa_entidad_federativ");

                    b.HasOne("MC_Universo_API.Models.Escolaridad", "Escolaridad")
                        .WithMany()
                        .HasForeignKey("EscolaridadId")
                        .HasConstraintName("fk_registro_ocho_acciones_escolaridad_escolaridad_id");

                    b.HasOne("MC_Universo_API.Models.CatalogoEstatusVoluntario", "CatalogoEstatusVoluntario")
                        .WithMany()
                        .HasForeignKey("EstatusRegistroId")
                        .HasConstraintName("fk_registro_ocho_acciones_catalogo_estatus_voluntario_estatus_");

                    b.HasOne("MC_Universo_API.Models.Genero", "Genero")
                        .WithMany()
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_registro_ocho_acciones_genero_genero_id");

                    b.HasOne("MC_Universo_API.Models.Motivo", "Motivo")
                        .WithMany()
                        .HasForeignKey("MotivoId")
                        .HasConstraintName("fk_registro_ocho_acciones_motivo_motivo_id");

                    b.Navigation("CatalogoEstatusVoluntario");

                    b.Navigation("EntidadFederativa");

                    b.Navigation("Escolaridad");

                    b.Navigation("Genero");

                    b.Navigation("Motivo");
                });

            modelBuilder.Entity("MC_Universo_API.Models.RegistroOchoAccionesCatalogoOchoAcciones", b =>
                {
                    b.HasOne("MC_Universo_API.Models.CatalogoOchoAcciones", "CatalogoOchoAcciones")
                        .WithMany()
                        .HasForeignKey("CatalogoOchoAccionesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_registro_ocho_acciones_catalogo_ocho_acciones_catalogo_ocho");

                    b.HasOne("MC_Universo_API.Models.RegistroOchoAcciones", "RegistroOchoAcciones")
                        .WithMany()
                        .HasForeignKey("RegistroOchoAccionesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_registro_ocho_acciones_catalogo_ocho_acciones_registro_ocho");

                    b.Navigation("CatalogoOchoAcciones");

                    b.Navigation("RegistroOchoAcciones");
                });

            modelBuilder.Entity("MC_Universo_API.Models.RegistroOchoAccionesHabilidad", b =>
                {
                    b.HasOne("MC_Universo_API.Models.Habilidad", "Habilidad")
                        .WithMany()
                        .HasForeignKey("HabilidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_registro_ocho_acciones_habilidad_habilidad_habilidad_id");

                    b.HasOne("MC_Universo_API.Models.RegistroOchoAcciones", "RegistroOchoAcciones")
                        .WithMany()
                        .HasForeignKey("RegistroOchoAccionesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_registro_ocho_acciones_habilidad_registro_ocho_acciones_reg");

                    b.Navigation("Habilidad");

                    b.Navigation("RegistroOchoAcciones");
                });

            modelBuilder.Entity("MC_Universo_API.Models.RegistroOchoAccionesInteres", b =>
                {
                    b.HasOne("MC_Universo_API.Models.Interes", "Interes")
                        .WithMany()
                        .HasForeignKey("InteresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_registro_ocho_acciones_interes_interes_interes_id");

                    b.HasOne("MC_Universo_API.Models.RegistroOchoAcciones", "RegistroOchoAcciones")
                        .WithMany()
                        .HasForeignKey("RegistroOchoAccionesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_registro_ocho_acciones_interes_registro_ocho_acciones_regis");

                    b.Navigation("Interes");

                    b.Navigation("RegistroOchoAcciones");
                });

            modelBuilder.Entity("MC_Universo_API.Models.RegistroOchoAccionesUsuarioCatalogoOchoAcciones", b =>
                {
                    b.HasOne("MC_Universo_API.Models.CatalogoOchoAcciones", "CatalogoOchoAcciones")
                        .WithMany()
                        .HasForeignKey("CatalogoOchoAccionesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_registro_ocho_acciones_usuario_catalogo_ocho_acciones_catal");

                    b.HasOne("MC_Universo_API.Models.RegistroOchoAccionesUsuario", "RegistroOchoAccionesUsuario")
                        .WithMany()
                        .HasForeignKey("RegistroOchoAccionesUsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_registro_ocho_acciones_usuario_catalogo_ocho_acciones_regis");

                    b.Navigation("CatalogoOchoAcciones");

                    b.Navigation("RegistroOchoAccionesUsuario");
                });

            modelBuilder.Entity("MC_Universo_API.Models.RespuestasEncuesta", b =>
                {
                    b.HasOne("MC_Universo_API.Models.Encuesta", "Encuesta")
                        .WithMany()
                        .HasForeignKey("EncuestaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_respuestas_encuesta_encuesta_encuesta_id");

                    b.HasOne("MC_Universo_API.Models.CatalogoPreguntasEncuestas", "CatalogoPreguntasEncuestas")
                        .WithMany()
                        .HasForeignKey("PreguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_respuestas_encuesta_catalogo_preguntas_encuestas_pregunta_id");

                    b.Navigation("CatalogoPreguntasEncuestas");

                    b.Navigation("Encuesta");
                });

            modelBuilder.Entity("MC_Universo_API.Models.RespuestasOchoAcciones", b =>
                {
                    b.HasOne("MC_Universo_API.Models.CatalogoPreguntasOchoAcciones", "CatalogoPreguntasOchoAcciones")
                        .WithMany()
                        .HasForeignKey("PreguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_respuestas_ocho_acciones_catalogo_preguntas_ocho_acciones_p");

                    b.HasOne("MC_Universo_API.Models.RegistroOchoAcciones", "RegistroOchoAcciones")
                        .WithMany()
                        .HasForeignKey("RegistroOchoAccionesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_respuestas_ocho_acciones_registro_ocho_acciones_registro_oc");

                    b.Navigation("CatalogoPreguntasOchoAcciones");

                    b.Navigation("RegistroOchoAcciones");
                });

            modelBuilder.Entity("MC_Universo_API.Models.RespuestasOchoAccionesRegistroOchoAccionesUsuario", b =>
                {
                    b.HasOne("MC_Universo_API.Models.CatalogoPreguntasOchoAcciones", "CatalogoPreguntasOchoAcciones")
                        .WithMany()
                        .HasForeignKey("PreguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_respuestas_ocho_acciones_registro_ocho_acciones_usuario_cat");

                    b.HasOne("MC_Universo_API.Models.RegistroOchoAccionesUsuario", "RegistroOchoAccionesUsuario")
                        .WithMany()
                        .HasForeignKey("RegistroOchoAccionesUsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_respuestas_ocho_acciones_registro_ocho_acciones_usuario_reg");

                    b.Navigation("CatalogoPreguntasOchoAcciones");

                    b.Navigation("RegistroOchoAccionesUsuario");
                });

            modelBuilder.Entity("MC_Universo_API.Models.UsuarioPerfil", b =>
                {
                    b.HasOne("MC_Universo_API.Models.Perfil", "Perfil")
                        .WithMany()
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_usuario_perfil_perfil_perfil_id");

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("MC_Universo_API.Models.Voluntario", b =>
                {
                    b.HasOne("MC_Universo_API.Models.EntidadFederativa", "EntidadFederativa")
                        .WithMany()
                        .HasForeignKey("EntidadFederativaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_voluntario_entidad_federativa_entidad_federativa_id");

                    b.HasOne("MC_Universo_API.Models.Escolaridad", "Escolaridad")
                        .WithMany()
                        .HasForeignKey("EscolaridadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_voluntario_escolaridad_escolaridad_id");

                    b.HasOne("MC_Universo_API.Models.CatalogoEstatusVoluntario", "CatalogoEstatusVoluntario")
                        .WithMany()
                        .HasForeignKey("EstatusVoluntarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_voluntario_catalogo_estatus_voluntario_estatus_voluntario_id");

                    b.HasOne("MC_Universo_API.Models.Genero", "Genero")
                        .WithMany()
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_voluntario_genero_genero_id");

                    b.HasOne("MC_Universo_API.Models.Motivo", "Motivo")
                        .WithMany()
                        .HasForeignKey("MotivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_voluntario_motivo_motivo_id");

                    b.Navigation("CatalogoEstatusVoluntario");

                    b.Navigation("EntidadFederativa");

                    b.Navigation("Escolaridad");

                    b.Navigation("Genero");

                    b.Navigation("Motivo");
                });

            modelBuilder.Entity("MC_Universo_API.Models.VoluntarioComentario", b =>
                {
                    b.HasOne("MC_Universo_API.Models.Voluntario", "Voluntario")
                        .WithMany()
                        .HasForeignKey("VoluntarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_voluntario_comentario_voluntario_voluntario_id");

                    b.Navigation("Voluntario");
                });

            modelBuilder.Entity("MC_Universo_API.Models.VoluntarioHabilidad", b =>
                {
                    b.HasOne("MC_Universo_API.Models.Habilidad", "Habilidad")
                        .WithMany()
                        .HasForeignKey("HabilidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_voluntario_habilidad_habilidad_habilidad_id");

                    b.HasOne("MC_Universo_API.Models.Voluntario", "Voluntario")
                        .WithMany()
                        .HasForeignKey("VoluntarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_voluntario_habilidad_voluntario_voluntario_id");

                    b.Navigation("Habilidad");

                    b.Navigation("Voluntario");
                });

            modelBuilder.Entity("MC_Universo_API.Models.VoluntarioInteres", b =>
                {
                    b.HasOne("MC_Universo_API.Models.Interes", "Interes")
                        .WithMany()
                        .HasForeignKey("InteresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_voluntario_interes_interes_interes_id");

                    b.HasOne("MC_Universo_API.Models.Voluntario", "Voluntario")
                        .WithMany()
                        .HasForeignKey("VoluntarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_voluntario_interes_voluntario_voluntario_id");

                    b.Navigation("Interes");

                    b.Navigation("Voluntario");
                });

            modelBuilder.Entity("MC_Universo_API.Models.VoluntarioPrograma", b =>
                {
                    b.HasOne("MC_Universo_API.Models.Programa", "Programa")
                        .WithMany()
                        .HasForeignKey("ProgramaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_voluntario_programa_programa_programa_id");

                    b.HasOne("MC_Universo_API.Models.Voluntario", "Voluntario")
                        .WithMany()
                        .HasForeignKey("VoluntarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_voluntario_programa_voluntario_voluntario_id");

                    b.Navigation("Programa");

                    b.Navigation("Voluntario");
                });
#pragma warning restore 612, 618
        }
    }
}
